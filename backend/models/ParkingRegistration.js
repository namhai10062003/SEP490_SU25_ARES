import mongoose from 'mongoose';
const { Schema } = mongoose;

const parkingRegistrationSchema = new Schema({
  userId: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  apartmentId: { type: Schema.Types.ObjectId, ref: 'Apartment', required: true },
  apartmentCode: { type: String, required: true },
  slug: { type: String, required: true },
  owner: { type: String, required: true },
  ownerPhone: { type: String, required: true },

  vehicleType: { type: String, enum: ['xe m√°y', '√¥ t√¥'], required: true },
  licensePlate: { type: String, required: true },
  chassisNumber: { type: String },
  engineNumber: { type: String },

  registeredCity: { type: String, required: true },
  registeredDistrict: { type: String, required: true },
  registerDate: { type: Date, required: true },
  expireDate: { type: Date },

  documentFront: { type: String },
  documentBack: { type: String },

  // Tr∆∞·ªùng m·ªõi: gi√° c·ªë ƒë·ªãnh d·ª±a theo lo·∫°i xe
  price: { type: Number, required: true }, // s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông set

  status: {
    type: String,
    enum: ['pending', 'approved', 'rejected', 'cancelled'], // ‚Üê th√™m cancelled
    default: 'pending'
  }
}, {
  timestamps: true
});


// üß† T√≠nh gi√° t·ª± ƒë·ªông tr∆∞·ªõc khi l∆∞u
parkingRegistrationSchema.pre('save', function (next) {
  if (this.vehicleType === '√¥ t√¥') {
    this.price = 800000; // 800 ngh√¨n ƒë·ªìng
  } else if (this.vehicleType === 'xe m√°y') {
    this.price = 80000; // 80 ngh√¨n ƒë·ªìng
  }
  next();
});

const ParkingRegistration = mongoose.model('ParkingRegistration', parkingRegistrationSchema);

export default ParkingRegistration;
