
import { cloudinary } from '../db/cloudinary.js'; // üëà ƒë√£ c·∫•u h√¨nh elsewhere
import Apartment from '../models/Apartment.js';
import Resident from '../models/Resident.js';
// ham xem chi tiet nhan khau 
export const getResidentDetail = async (req, res) => {
  try {
    const { id } = req.params;

    // T√¨m nh√¢n kh·∫©u theo id v√† populate th√¥ng tin cƒÉn h·ªô (n·∫øu c·∫ßn)
    const resident = await Resident.findById(id).populate('apartmentId');

    if (!resident) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y nh√¢n kh·∫©u.' });
    }

    res.status(200).json({
      message: 'L·∫•y th√¥ng tin chi ti·∫øt nh√¢n kh·∫©u th√†nh c√¥ng',
      data: resident
    });
  } catch (err) {
    console.error('‚ùå L·ªói khi l·∫•y chi ti·∫øt nh√¢n kh·∫©u:', err);
    res.status(500).json({ message: 'L·ªói server', error: err.message });
  }
};

/* ========== CREATE RESIDENT & EMIT SOCKET ========== */
export const createResident = async (req, res) => {
  try {
    /* 1. L·∫•y d·ªØ li·ªáu t·ª´ body */
    const {
      apartmentId,
      fullName,
      gender,
      dateOfBirth,
      relationWithOwner,
      moveInDate,
      nationality,
      idNumber,
      issueDate
    } = req.body;

    /* 2. T√¨m cƒÉn h·ªô */
    const apartment = await Apartment.findById(apartmentId);
    if (!apartment) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y cƒÉn h·ªô.' });
    }

    /* 3. Ki·ªÉm tra quy·ªÅn truy c·∫≠p: isOwner ho·∫∑c isRenter */
    const userId = req.user?._id;

    const isOwnerMatch  = apartment.isOwner && apartment.isOwner.equals(userId);
    const isRenterMatch = apartment.isRenter && apartment.isRenter.equals(userId);

    if (!isOwnerMatch && !isRenterMatch) {
      return res.status(403).json({
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn ƒëƒÉng k√Ω nh√¢n kh·∫©u cho cƒÉn h·ªô n√†y.',
      });
    }

    /* 4. Upload ·∫£nh gi·∫•y t·ªù (n·∫øu c√≥) */
    let documentFrontUrl = '';
    let documentBackUrl = '';

    if (req.files?.documentFront?.[0]) {
      const uploaded = await cloudinary.uploader.upload(
        req.files.documentFront[0].path,
        { folder: 'residents' }
      );
      documentFrontUrl = uploaded.secure_url;
    }

    if (req.files?.documentBack?.[0]) {
      const uploaded = await cloudinary.uploader.upload(
        req.files.documentBack[0].path,
        { folder: 'residents' }
      );
      documentBackUrl = uploaded.secure_url;
    }

    /* 5. T·∫°o resident m·ªõi */
    const resident = await Resident.create({
      apartmentId,
      fullName,
      gender,
      dateOfBirth,
      relationWithOwner,
      moveInDate,
      nationality,
      idNumber,
      issueDate,
      documentFront: documentFrontUrl,
      documentBack : documentBackUrl,
      verifiedByStaff: false,
      // rejectReason,
      // verifiedByAdmin: false,
    });

    /* 6. Emit socket cho nh√¢n vi√™n */
    if (global._io) {
      global._io.emit('new-resident-registered', {
        _id:           resident._id,
        fullName:      resident.fullName,
        gender:        resident.gender,
        apartmentCode: apartment.apartmentCode,
        relation:      resident.relationWithOwner,
        dateOfBirth:   resident.dateOfBirth,
        documentFront: resident.documentFront
      });
    }

    /* 7. Tr·∫£ ph·∫£n h·ªìi */
    return res.status(201).json({
      message: 'Th√™m nh√¢n kh·∫©u th√†nh c√¥ng, vui l√≤ng ƒë·ª£i x√°c minh.',
      data: resident,
    });

  } catch (err) {
    console.error('[createResident] ‚ùå', err);
    return res.status(500).json({ message: 'L·ªói server', error: err.message });
  }
};
// L·∫•y danh s√°ch nh√¢n kh·∫©u ch∆∞a ƒë∆∞·ª£c x√°c minh b·ªüi nh√¢n vi√™n
export const getResidentsUnverifiedByStaff = async (req, res) => {
  try {
    const unverifiedResidents = await Resident.find({ verifiedByStaff: false }).populate('apartmentId');

    res.status(200).json({
      residents: unverifiedResidents,
    });
  } catch (err) {
    console.error('‚ùå L·ªói khi l·∫•y danh s√°ch nh√¢n kh·∫©u ch∆∞a x√°c minh:', err);
    res.status(500).json({ message: 'L·ªói server', error: err.message });
  }
};

// ‚úÖ Duy·ªát nh√¢n kh·∫©u b·ªüi nh√¢n vi√™n (staff)
export const verifyResidentByStaff = async (req, res) => {
  try {
    const resident = await Resident.findById(req.params.id);
    if (!resident) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y nh√¢n kh·∫©u' });
    }

    // ‚úÖ C·∫≠p nh·∫≠t x√°c minh b·ªüi staff & xo√° rejectReason (n·∫øu c√≥ tr∆∞·ªõc ƒë√≥)
    resident.verifiedByStaff = true;
    resident.rejectReason = null;
    await resident.save();

    return res.status(200).json({ message: '‚úÖ Nh√¢n kh·∫©u ƒë√£ ƒë∆∞·ª£c nh√¢n vi√™n x√°c minh' });
  } catch (err) {
    console.error('‚ùå L·ªói x√°c minh:', err);
    return res.status(500).json({ message: 'L·ªói server', error: err.message });
  }
};

// ‚ùå T·ª´ ch·ªëi nh√¢n kh·∫©u b·ªüi nh√¢n vi√™n (staff)
export const rejectResidentByStaff = async (req, res) => {
  try {
    const { id } = req.params;
    const { reason } = req.body;

    const resident = await Resident.findById(id).populate("createdBy");

    if (!resident) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y nh√¢n kh·∫©u" });
    }

    if (!reason || reason.trim() === "") {
      return res.status(400).json({ message: "L√Ω do t·ª´ ch·ªëi l√† b·∫Øt bu·ªôc" });
    }

    // ‚ùå C·∫≠p nh·∫≠t tr·∫°ng th√°i t·ª´ ch·ªëi
    resident.verifiedByStaff = false;
    resident.rejectReason = reason;
    await resident.save();

    return res.status(200).json({
      message: "‚ùå Nh√¢n kh·∫©u ƒë√£ b·ªã t·ª´ ch·ªëi",
      rejectReason: resident.rejectReason,
      createdBy: resident.createdBy?.name || "Kh√¥ng r√µ ng∆∞·ªùi t·∫°o",
    });
  } catch (err) {
    console.error("‚ùå L·ªói t·ª´ ch·ªëi:", err);
    return res.status(500).json({ message: "L·ªói server", error: err.message });
  }
};



//dem nhan khau trong apartment 
export const countResidentsByApartment = async (req, res) => {
  try {
    const { apartmentId } = req.params;

    const count = await Resident.countDocuments({ apartmentId });

    return res.status(200).json({
      message: 'ƒê·∫øm nh√¢n kh·∫©u th√†nh c√¥ng',
      apartmentId,
      residentCount: count,
    });
  } catch (err) {
    console.error(err);
    return res.status(500).json({ message: 'L·ªói server', error: err.message });
  }
};
// list dc ra resident v√† ƒë·∫øm 
export const getMyResidents = async (req, res) => {
  try {
    const userId = req.user._id;

    const apartments = await Apartment.find({
      $or: [{ isOwner: userId }, { isRenter: userId }],
    })
      .populate('isOwner', '_id name')
      .populate('isRenter', '_id name');

    if (!apartments.length) {
      return res
        .status(404)
        .json({ message: 'B·∫°n ch∆∞a c√≥ cƒÉn h·ªô n√†o ƒë∆∞·ª£c li√™n k·∫øt.' });
    }

    const result = await Promise.all(
      apartments.map(async (apt) => {
        const residentsRaw = await Resident.find({ apartmentId: apt._id });

        const residents = residentsRaw.map((r) => ({
          _id: r._id,
          fullName: r.fullName,
          gender: r.gender,
          dateOfBirth: r.dateOfBirth,
          relationWithOwner: r.relationWithOwner,
          verifiedByStaff: r.verifiedByStaff,
          rejectReason: r.rejectReason, // üëà th√™m l√Ω do t·ª´ ch·ªëi
        }));

        return {
          apartmentId: apt._id,
          apartmentCode: apt.apartmentCode,
          ownerName: apt.ownerName || apt.isOwner?.name || '',
          isOwner: apt.isOwner,
          isRenter: apt.isRenter,
          residentCount: residents.length,
          residents,
        };
      })
    );

    return res.status(200).json(result);
  } catch (err) {
    console.error('‚ùå L·ªói getMyResidents:', err);
    return res.status(500).json({ message: 'L·ªói server', error: err.message });
  }
};



export const getResidentsByApartment = async (req, res) => {
    try {
      const { apartmentId } = req.params;
  
      const residents = await Resident.find({ apartmentId });
  
      res.status(200).json({
        message: 'L·∫•y danh s√°ch nh√¢n kh·∫©u th√†nh c√¥ng',
        data: residents
      });
    } catch (err) {
      console.error(err);
      res.status(500).json({ message: 'L·ªói server', error: err.message });
    }
  };

  // ‚úÖ L·∫•y to√†n b·ªô danh s√°ch nh√¢n kh·∫©u (admin ho·∫∑c staff)
  export const getAllResidents = async (req, res) => {
    try {
      const residents = await Resident.find().populate('apartmentId');
  
      const formatted = residents.map((r) => ({
        fullName: r.fullName,
        gender: r.gender,
        dateOfBirth: r.dateOfBirth,
        relationWithOwner: r.relationWithOwner,
        verifiedByStaff: r.verifiedByStaff,
        rejectReason: r.rejectReason,
        apartmentCode: r.apartmentId?.apartmentCode || '---',
        createdAt: r.createdAt,
      }));
  
      return res.status(200).json({
        message: 'L·∫•y danh s√°ch to√†n b·ªô nh√¢n kh·∫©u th√†nh c√¥ng',
        data: formatted,
      });
    } catch (err) {
      console.error('‚ùå L·ªói getAllResidents:', err);
      return res.status(500).json({ message: 'L·ªói server', error: err.message });
    }
  };
  
