import bcrypt from 'bcrypt';
import crypto from "crypto";
import dotenv from "dotenv";
import { OAuth2Client } from "google-auth-library";
import jwt from 'jsonwebtoken';
import nodemailer from "nodemailer";
import User from '../models/User.js';

dotenv.config();

const client = new OAuth2Client(process.env.GOOGLE_CLIENT_ID)
// C·∫•u h√¨nh g·ª≠i email
const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: process.env.USER_EMAIL,
    pass: process.env.USER_PASSWORD,
  },
});
// G·ª≠i OTP qua email
const sendOTP = async (email, otp) => {
  try {
    await transporter.sendMail({
      from: process.env.USER_EMAIL,
      to: email,
      subject: "X√°c th·ª±c t√†i kho·∫£n",
      text: `M√£ OTP c·ªßa b·∫°n l√†: ${otp}. M√£ c√≥ hi·ªáu l·ª±c trong 5 ph√∫t.`,
    });
    console.log("‚úÖ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn:", email);
  } catch (error) {
    console.error("‚ùå L·ªói g·ª≠i OTP:", error.message);
    throw new Error("L·ªói g·ª≠i OTP!");
  }

};
// g·ª≠i l·∫°i otp 
export const resendOTP = async (req, res) => {
  const { email } = req.body;

  if (!email) {
    return res.status(400).json({ success: false, message: "Thi·∫øu email!" });
  }

  try {
    const user = await User.findOne({ email });

    if (!user) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!" });
    }

    // ‚úÖ T·∫°o m√£ OTP m·ªõi
    const otp = Math.floor(100000 + Math.random() * 900000).toString();
    // const otpExpires = new Date(Date.now() + 5 * 60 * 1000); // H·∫øt h·∫°n sau 5 ph√∫t
    const otpExpires = new Date(Date.now() + 60 * 1000); // 1 ph√∫t
    // ‚úÖ C·∫≠p nh·∫≠t OTP v√† th·ªùi h·∫°n
    user.otp = otp;
    user.otpExpires = otpExpires;
    await user.save();

    // ‚úÖ G·ª≠i email OTP
    await sendOTP(user.email, otp); // tu·ª≥ thu·ªôc v√†o h√†m b·∫°n vi·∫øt

    res.json({ success: true, message: "‚úÖ M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i l·∫°i!" });
  } catch (err) {
    console.error("L·ªói g·ª≠i l·∫°i OTP:", err.message);
    res.status(500).json({ success: false, message: "L·ªói h·ªá th·ªëng!" });
  }
};
//forgotpassword
const forgotPassword = async (req, res) => {
  try {
    if (!req.body || typeof req.body !== 'object') {
      return res.status(400).json({ success: false, error: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá!" });
    }

    const { email } = req.body;

    if (!email) {
      return res.status(400).json({ success: false, error: "Vui l√≤ng nh·∫≠p email!" });
    }

    const user = await User.findOne({ email: email.trim(), deletedAt: null });
    if (!user) {
      return res.status(400).json({ success: false, error: "Email kh√¥ng t·ªìn t·∫°i!" });
    }

    // T·∫°o OTP v√† l∆∞u v√†o DB
    const otp = crypto.randomInt(100000, 999999).toString();
    user.otp = otp;
    user.otpExpires = Date.now() + 5 * 60 * 1000; // OTP h·∫øt h·∫°n sau 5 ph√∫t
    await user.save();

    // G·ª≠i OTP qua email
    try {
      await sendOTP(email, otp);
    } catch (emailError) {
      console.error("‚ùå L·ªói khi g·ª≠i email OTP:", emailError.message || emailError);
      return res.status(500).json({ success: false, error: "Kh√¥ng th·ªÉ g·ª≠i email OTP. Vui l√≤ng th·ª≠ l·∫°i sau!" });
    }

    return res.status(200).json({
      success: true,
      message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n.",
    });

  } catch (error) {
    console.error("‚ùå L·ªói server khi x·ª≠ l√Ω qu√™n m·∫≠t kh·∫©u:", error.message || error);
    return res.status(500).json({ success: false, error: "ƒê√£ x·∫£y ra l·ªói ph√≠a server." });
  }
};
//reset password
const resetPassword = async (req, res) => {
  try {
    const { email, otp, newPassword } = req.body;

    // Ki·ªÉm tra ƒë·ªß th√¥ng tin
    if (!email || !otp || !newPassword) {
      return res.status(400).json({ success: false, error: "Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt!" });
    }

    // T√¨m user theo email
    const user = await User.findOne({ email: email.trim(), deletedAt: null });
    if (!user) {
      return res.status(400).json({ success: false, error: "Email kh√¥ng t·ªìn t·∫°i!" });
    }

    // Ki·ªÉm tra OTP v√† h·∫°n s·ª≠ d·ª•ng
    if (!user.otp || !user.otpExpires) {
      return res.status(400).json({ success: false, error: "OTP kh√¥ng h·ª£p l·ªá!" });
    }

    if (user.otp !== otp) {
      return res.status(400).json({ success: false, error: "M√£ OTP kh√¥ng ƒë√∫ng!" });
    }

    if (user.otpExpires < Date.now()) {
      return res.status(400).json({ success: false, error: "M√£ OTP ƒë√£ h·∫øt h·∫°n!" });
    }

    // Hash m·∫≠t kh·∫©u m·ªõi
    const hashedPassword = await bcrypt.hash(newPassword, 10);

    // C·∫≠p nh·∫≠t user
    user.password = hashedPassword;
    user.otp = undefined;
    user.otpExpires = undefined;
    await user.save();

    return res.status(200).json({
      success: true,
      message: "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!",
    });

  } catch (error) {
    console.error("‚ùå L·ªói ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:", error.message || error);
    return res.status(500).json({ success: false, error: "L·ªói ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u!" });
  }
};

//login
const login = async (req, res) => {
  try {
    const { email, password } = req.body;
    const user = await User.findOne({ email });

    if (!user) {
      return res.status(401).json({ success: false, error: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" });
    }

    if (!user.verified) {
      return res.status(401).json({ success: false, error: "T√†i kho·∫£n ch∆∞a x√°c th·ª±c email!" });
    }

    // Deleted user check
    if (user.deletedAt !== null) {
      return res.status(403).json({
        success: false,
        error: "T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã x√≥a. Vui l√≤ng li√™n h·ªá admin@gmail.com ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt."
      });
    }

    // Blocked user check
    if (user.status === 0) {
      return res.status(403).json({
        success: false,
        error: "T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a. Vui l√≤ng li√™n h·ªá admin@gmail.com ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt."
      });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(401).json({ success: false, error: "Sai m·∫≠t kh·∫©u!" });
    }
    user.isOnline = true;
    await user.save();
    const token = jwt.sign(
      { _id: user._id, role: user.role, name: user.name, phone: user.phone , address: user.address, identityNumber: user.identityNumber , email: user.email, dob: user.dob},
      process.env.JWT_SECRET,
      { expiresIn: "10d" }
    );

    return res.status(200).json({
      success: true,
      token,
      user: { _id: user._id, name: user.name, role: user.role, isOnline: user.isOnline, phone :user.phone ,address: user.address, identityNumber: user.identityNumber, email: user.email, dob: user.dob},
    });
  } catch (error) {
    console.error("‚ùå L·ªói ƒëƒÉng nh·∫≠p:", error.message);
    return res.status(500).json({ success: false, error: "L·ªói ƒëƒÉng nh·∫≠p!" });
  }
};

// verify email 
const verifyUser = async (req, res) => {
  try {
    const { email, otp } = req.body;

    // Tr∆∞·ªùng h·ª£p x√°c th·ª±c qua OTP (ƒëƒÉng k√Ω/ƒëƒÉng nh·∫≠p b∆∞·ªõc 2)
    if (otp && email) {
      const user = await User.findOne({ email: email.trim(), deletedAt: null });

      if (!user) {
        return res.status(400).json({ success: false, error: "Email kh√¥ng t·ªìn t·∫°i!" });
      }

      if (user.verified) {
        return res.status(400).json({ success: false, error: "T√†i kho·∫£n ƒë√£ x√°c th·ª±c!" });
      }
      console.log("üì® OTP nh·∫≠p:", otp);
      console.log("üßæ OTP l∆∞u:", user.otp);
      console.log("‚è∞ H·∫øt h·∫°n:", new Date(user.otpExpires), "Hi·ªán t·∫°i:", new Date());

      if (user.otp !== otp.trim() || Date.now() > user.otpExpires) {
        return res.status(400).json({ success: false, error: "OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!" });
      }

      user.verified = true;
      user.otp = undefined;
      user.otpExpires = undefined;
      await user.save();

      const token = jwt.sign(
        { _id: user._id, role: user.role, email: user.email, name: user.name, phone: user.phone },
        process.env.JWT_SECRET,
        { expiresIn: "10d" }
      );

      return res.status(200).json({
        success: true,
        message: "X√°c th·ª±c OTP th√†nh c√¥ng!",
        token,
        user: {
          _id: user._id,
          name: user.name,
          role: user.role,
          email: user.email,
          phone: user.phone
        },
      });
    }

    // Tr∆∞·ªùng h·ª£p x√°c th·ª±c token th√¥ng th∆∞·ªùng (ƒë√£ ƒëƒÉng nh·∫≠p)
    if (req.user) {
      // Always fetch the latest user data from DB
      const user = await User.findById(req.user._id);

      if (!user) {
        return res.status(401).json({ success: false, error: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" });
      }
      if (user.deletedAt !== null) {
        return res.status(403).json({ success: false, error: "T√†i kho·∫£n ƒë√£ b·ªã x√≥a." });
      }
      if (user.status === 0) {
        return res.status(403).json({ success: false, error: "T√†i kho·∫£n ƒë√£ b·ªã kh√≥a." });
      }

      return res.status(200).json({
        success: true,
        message: "Token h·ª£p l·ªá!",
        user: {
          _id: user._id,
          name: user.name,
          role: user.role,
          email: user.email,
          identityNumber: user.identityNumber,
          address: user.address,
          phone : user.phone,
          dob: user.dob
        },
      });
    }

    return res.status(400).json({ success: false, error: "Thi·∫øu d·ªØ li·ªáu x√°c th·ª±c!" });
  } catch (error) {
    console.error("‚ùå L·ªói x√°c th·ª±c:", error);
    return res.status(500).json({ success: false, error: "L·ªói x√°c th·ª±c!" });
  }
};
// register
const register = async (req, res) => {
  try {
    const { name, email, password, phone, role } = req.body;

    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a v√† ch∆∞a b·ªã x√≥a
    const existingUser = await User.findOne({ email, deletedAt: null });

    if (existingUser) {
      if (existingUser.verified) {
        // ƒê√£ x√°c minh ‚Üí kh√¥ng cho ƒëƒÉng k√Ω l·∫°i
        return res.status(400).json({ success: false, error: "Email ƒë√£ t·ªìn t·∫°i!" });
      } else {
        // Ch∆∞a x√°c minh ‚Üí x√≥a ng∆∞·ªùi d√πng c≈© ƒë·ªÉ ƒëƒÉng k√Ω l·∫°i
        await User.deleteOne({ _id: existingUser._id });
      }
    }

    // Hash m·∫≠t kh·∫©u
    const hashedPassword = await bcrypt.hash(password, 10);

    // Ki·ªÉm tra role h·ª£p l·ªá
    const validRoles = ["customer", "host"];
    const userRole = validRoles.includes(role) ? role : "customer";

    // T·∫°o m√£ OTP v√† th·ªùi gian h·∫øt h·∫°n
    const otp = crypto.randomInt(100000, 999999).toString();
    const otpExpires = Date.now() + 5 * 60 * 1000; // 5 ph√∫t

    // T·∫°o ng∆∞·ªùi d√πng m·ªõi
    const newUser = new User({
      name,
      email,
      password: hashedPassword,
      role: userRole,
      phone,
      verified: false,
      otp,
      otpExpires,
    });

    await newUser.save();

    // G·ª≠i OTP qua email
    try {
      await sendOTP(email, otp);
    } catch (error) {
      await User.deleteOne({ _id: newUser._id }); // X√≥a n·∫øu l·ªói g·ª≠i OTP
      return res.status(500).json({ success: false, error: "L·ªói g·ª≠i OTP!" });
    }

    return res.status(201).json({
      success: true,
      message: "ƒêƒÉng k√Ω th√†nh c√¥ng! OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email.",
      userId: newUser._id,
    });

  } catch (error) {
    console.error("‚ùå L·ªói ƒëƒÉng k√Ω:", error.message);
    return res.status(500).json({ success: false, error: "L·ªói ƒëƒÉng k√Ω t√†i kho·∫£n!" });
  }
};

// login with gooogle
const googleAuth = async (req, res) => {
  try {
    const { token } = req.body

    if (!token) {
      return res.status(400).json({
        success: false,
        error: "Google token is required",
      })
    }

    // Verify the Google token
    const ticket = await client.verifyIdToken({
      idToken: token,
      audience: process.env.GOOGLE_CLIENT_ID,
    })

    const payload = ticket.getPayload()
    const { sub: googleId, email, name, picture } = payload

    // Check if user already exists with this Google ID
    let user = await User.findOne({ googleId, deletedAt: null });

    if (user) {
      // User exists with Google ID, just log them in
      user.isOnline = true
      await user.save()
    } else {
      // Check if user exists with this email (from regular registration)
      user = await User.findOne({ email, deletedAt: null });

      if (user) {
        // User exists with email, link Google account
        user.googleId = googleId
        user.picture = picture
        user.isOnline = true
        await user.save()
      } else {
        // Create new user with Google account
        // Generate a random password since it's required in your schema
        const randomPassword = Math.random().toString(36).slice(-8)
        const hashedPassword = await bcrypt.hash(randomPassword, 10)

        user = new User({
          name,
          email,
          password: hashedPassword, // Required field, but won't be used for Google users
          googleId,
          picture,
          role: "customer",
          isOnline: true,
        })

        await user.save()
      }
    }

    // Generate JWT token (same format as your login function)
    const jwtToken = jwt.sign({ _id: user._id, role: user.role, name: user.name }, process.env.JWT_SECRET, {
      expiresIn: "10d",
    })

    // Send response in same format as your login function
    return res.status(200).json({
      success: true,
      token: jwtToken,
      user: { _id: user._id, name: user.name, role: user.role },
      isOnline: user.isOnline,
    })
  } catch (error) {
    console.error("Google Auth Error:", error.message)
    return res.status(500).json({ success: false, error: error.message })
  }
}


const googleCallback = async (req, res) => {
  try {
    const { code } = req.body

    // Exchange authorization code for tokens
    const tokenResponse = await fetch('https://oauth2.googleapis.com/token', {
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: new URLSearchParams({
        client_id: process.env.GOOGLE_CLIENT_ID,
        client_secret: process.env.GOOGLE_CLIENT_SECRET,
        code,
        grant_type: 'authorization_code',
        redirect_uri: `${process.env.CLIENT_URL}/auth/google/callback`,
      }),
    })

    const tokens = await tokenResponse.json()

    // Get user info from Google
    const userResponse = await fetch(`https://www.googleapis.com/oauth2/v2/userinfo?access_token=${tokens.access_token}`)
    const googleUser = await userResponse.json()

    // Use your existing logic to create/find user
    let user = await User.findOne({ googleId: googleUser.id, deletedAt: null });

    if (!user) {
      user = await User.findOne({ email: googleUser.email, deletedAt: null });
      if (user) {
        user.googleId = googleUser.id
        await user.save()
      } else {
        const randomPassword = Math.random().toString(36).slice(-8)
        const hashedPassword = await bcrypt.hash(randomPassword, 10)

        user = new User({
          name: googleUser.name,
          email: googleUser.email,
          password: hashedPassword,
          googleId: googleUser.id,
          role: "customer",
          isOnline: true,
        })
        await user.save()
      }
    }

    const jwtToken = jwt.sign({ _id: user._id, role: user.role, name: user.name }, process.env.JWT_SECRET, {
      expiresIn: "10d",
    })

    return res.status(200).json({
      success: true,
      token: jwtToken,
      user: { _id: user._id, name: user.name, role: user.role },
      isOnline: user.isOnline,
    })
  } catch (error) {
    console.error("Google callback error:", error)
    return res.status(500).json({ success: false, error: error.message })
  }
}

export { forgotPassword, googleAuth, googleCallback, login, register, resetPassword, verifyUser };

