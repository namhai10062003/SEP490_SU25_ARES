import bcrypt from 'bcrypt';
import crypto from 'crypto';
import dotenv from 'dotenv';
import jwt from 'jsonwebtoken';
import nodemailer from 'nodemailer';
import User from '../models/User.js';
import { loginGoogle } from '../services/auth.service.js';

dotenv.config();

// C·∫•u h√¨nh g·ª≠i email
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: process.env.USER_EMAIL,
    pass: process.env.USER_PASSWORD,
  },
});
// G·ª≠i OTP qua email
const sendOTP = async (email, otp) => {
  try {
    await transporter.sendMail({
      from: process.env.USER_EMAIL,
      to: email,
      subject: 'X√°c th·ª±c t√†i kho·∫£n',
      text: `M√£ OTP c·ªßa b·∫°n l√†: ${otp}. M√£ c√≥ hi·ªáu l·ª±c trong 5 ph√∫t.`,
    });
    console.log('‚úÖ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn:', email);
  } catch (error) {
    console.error('‚ùå L·ªói g·ª≠i OTP:', error.message);
    throw new Error('L·ªói g·ª≠i OTP!');
  }
};
//forgotpassword
const forgotPassword = async (req, res) => {
  try {
    if (!req.body || typeof req.body !== 'object') {
      return res
        .status(400)
        .json({ success: false, error: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá!' });
    }

    const { email } = req.body;

    if (!email) {
      return res
        .status(400)
        .json({ success: false, error: 'Vui l√≤ng nh·∫≠p email!' });
    }

    const user = await User.findOne({ email: email.trim() });
    if (!user) {
      return res
        .status(400)
        .json({ success: false, error: 'Email kh√¥ng t·ªìn t·∫°i!' });
    }

    // T·∫°o OTP v√† l∆∞u v√†o DB
    const otp = crypto.randomInt(100000, 999999).toString();
    user.otp = otp;
    user.otpExpires = Date.now() + 5 * 60 * 1000; // OTP h·∫øt h·∫°n sau 5 ph√∫t
    await user.save();

    // G·ª≠i OTP qua email
    try {
      await sendOTP(email, otp);
    } catch (emailError) {
      console.error(
        '‚ùå L·ªói khi g·ª≠i email OTP:',
        emailError.message || emailError,
      );
      return res.status(500).json({
        success: false,
        error: 'Kh√¥ng th·ªÉ g·ª≠i email OTP. Vui l√≤ng th·ª≠ l·∫°i sau!',
      });
    }

    return res.status(200).json({
      success: true,
      message: 'OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n.',
    });
  } catch (error) {
    console.error(
      '‚ùå L·ªói server khi x·ª≠ l√Ω qu√™n m·∫≠t kh·∫©u:',
      error.message || error,
    );
    return res
      .status(500)
      .json({ success: false, error: 'ƒê√£ x·∫£y ra l·ªói ph√≠a server.' });
  }
};
//reset password
const resetPassword = async (req, res) => {
  try {
    const { email, otp, newPassword } = req.body;

    // Ki·ªÉm tra ƒë·ªß th√¥ng tin
    if (!email || !otp || !newPassword) {
      return res
        .status(400)
        .json({ success: false, error: 'Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt!' });
    }

    // T√¨m user theo email
    const user = await User.findOne({ email: email.trim() });
    if (!user) {
      return res
        .status(400)
        .json({ success: false, error: 'Email kh√¥ng t·ªìn t·∫°i!' });
    }

    // Ki·ªÉm tra OTP v√† h·∫°n s·ª≠ d·ª•ng
    if (!user.otp || !user.otpExpires) {
      return res
        .status(400)
        .json({ success: false, error: 'OTP kh√¥ng h·ª£p l·ªá!' });
    }

    if (user.otp !== otp) {
      return res
        .status(400)
        .json({ success: false, error: 'M√£ OTP kh√¥ng ƒë√∫ng!' });
    }

    if (user.otpExpires < Date.now()) {
      return res
        .status(400)
        .json({ success: false, error: 'M√£ OTP ƒë√£ h·∫øt h·∫°n!' });
    }

    // Hash m·∫≠t kh·∫©u m·ªõi
    const hashedPassword = await bcrypt.hash(newPassword, 10);

    // C·∫≠p nh·∫≠t user
    user.password = hashedPassword;
    user.otp = undefined;
    user.otpExpires = undefined;
    await user.save();

    return res.status(200).json({
      success: true,
      message: 'M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!',
    });
  } catch (error) {
    console.error('‚ùå L·ªói ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:', error.message || error);
    return res
      .status(500)
      .json({ success: false, error: 'L·ªói ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u!' });
  }
};

//login
const login = async (req, res) => {
  try {
    const { email, password } = req.body;
    const user = await User.findOne({ email });

    if (!user) {
      return res
        .status(401)
        .json({ success: false, error: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!' });
    }

    if (!user.verified) {
      return res
        .status(401)
        .json({ success: false, error: 'T√†i kho·∫£n ch∆∞a x√°c th·ª±c email!' });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(401).json({ success: false, error: 'Sai m·∫≠t kh·∫©u!' });
    }
    user.isOnline = true;
    await user.save();
    const token = jwt.sign(
      { _id: user._id, role: user.role, name: user.name },
      process.env.JWT_SECRET,
      { expiresIn: '10d' },
    );

    return res.status(200).json({
      success: true,
      token,
      user: {
        _id: user._id,
        name: user.name,
        role: user.role,
        isOnline: user.isOnline,
      },
    });
  } catch (error) {
    console.error('‚ùå L·ªói ƒëƒÉng nh·∫≠p:', error.message);
    return res.status(500).json({ success: false, error: 'L·ªói ƒëƒÉng nh·∫≠p!' });
  }
};

// verify email
const verify = async (req, res) => {
  try {
    const { email, otp } = req.body;

    if (!email || !otp) {
      return res
        .status(400)
        .json({ success: false, error: 'Thi·∫øu email ho·∫∑c OTP!' });
    }

    const user = await User.findOne({ email: email.trim() });

    if (!user) {
      return res
        .status(400)
        .json({ success: false, error: 'Email kh√¥ng t·ªìn t·∫°i!' });
    }

    if (user.verified) {
      return res
        .status(400)
        .json({ success: false, error: 'T√†i kho·∫£n ƒë√£ x√°c th·ª±c!' });
    }

    // Log ƒë·ªÉ debug
    console.log('üì® OTP nh·∫≠p:', otp);
    console.log('üßæ OTP l∆∞u:', user.otp);
    console.log(
      '‚è∞ H·∫øt h·∫°n:',
      new Date(user.otpExpires),
      'Hi·ªán t·∫°i:',
      new Date(),
    );

    // Ki·ªÉm tra OTP h·ª£p l·ªá
    if (user.otp !== otp.trim() || Date.now() > user.otpExpires) {
      return res
        .status(400)
        .json({ success: false, error: 'OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!' });
    }

    user.verified = true;
    user.otp = undefined;
    user.otpExpires = undefined;

    await user.save();

    const token = jwt.sign(
      { _id: user._id, role: user.role, email: user.email, name: user.name },
      process.env.JWT_SECRET,
      { expiresIn: '10d' },
    );

    return res.status(200).json({
      success: true,
      message: 'X√°c th·ª±c th√†nh c√¥ng!',
      token,
      user: {
        _id: user._id,
        name: user.name,
        role: user.role,
        email: user.email,
      },
    });
  } catch (error) {
    console.error('‚ùå L·ªói x√°c th·ª±c OTP:', error.message);
    return res.status(500).json({ success: false, error: 'L·ªói x√°c th·ª±c OTP!' });
  }
};
//verify normal
const verifynormal = async (req, res) => {
  try {
    // L·∫•y user t·ª´ middleware
    const user = req.user;

    if (!user) {
      return res
        .status(401)
        .json({ success: false, error: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!' });
    }

    return res.status(200).json({
      success: true,
      message: 'Token h·ª£p l·ªá!',
      user: {
        _id: user._id,
        name: user.name,
        role: user.role,
        email: user.email,
      },
    });
  } catch (error) {
    console.error('‚ùå L·ªói x√°c minh token:', error);
    return res
      .status(500)
      .json({ success: false, error: 'L·ªói x√°c minh token!' });
  }
};
// register
const register = async (req, res) => {
  try {
    const { name, email, password, phone, role } = req.body;

    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res
        .status(400)
        .json({ success: false, error: 'Email ƒë√£ t·ªìn t·∫°i!' });
    }

    // Hash m·∫≠t kh·∫©u
    const hashedPassword = await bcrypt.hash(password, 10);

    // Ki·ªÉm tra role h·ª£p l·ªá
    const validRoles = ['customer', 'host'];
    const userRole = validRoles.includes(role) ? role : 'customer';

    // T·∫°o m√£ OTP v√† th·ªùi gian h·∫øt h·∫°n
    const otp = crypto.randomInt(100000, 999999).toString();
    const otpExpires = Date.now() + 5 * 60 * 1000; // 5 ph√∫t

    // T·∫°o ng∆∞·ªùi d√πng m·ªõi
    const newUser = new User({
      name,
      email,
      password: hashedPassword,
      role: userRole,
      phone,
      verified: false,
      otp,
      otpExpires,
    });
    // G√°n ch√≠nh x√°c:
    // G√°n ch√≠nh x√°c:
    newUser.otp = otp;
    newUser.otpExpires = otpExpires;

    await newUser.save();

    // G·ª≠i OTP qua email
    try {
      await sendOTP(email, otp);
    } catch (error) {
      await User.deleteOne({ email }); // X√≥a n·∫øu l·ªói g·ª≠i OTP
      return res.status(500).json({ success: false, error: 'L·ªói g·ª≠i OTP!' });
    }

    return res.status(201).json({
      success: true,
      message: 'ƒêƒÉng k√Ω th√†nh c√¥ng! OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email.',
      userId: newUser._id,
    });
  } catch (error) {
    console.error('‚ùå L·ªói ƒëƒÉng k√Ω:', error.message);
    return res
      .status(500)
      .json({ success: false, error: 'L·ªói ƒëƒÉng k√Ω t√†i kho·∫£n!' });
  }
};

// Google authentication
const googleAuth = async (req, res) => {
  try {
    const { token } = req.body;

    if (!token) {
      return res.status(400).json({
        success: false,
        error: 'Google authorization code is required',
      });
    }

    // Check if user already exists with this Google ID
    const user = await loginGoogle({ idToken: token });

    // Generate JWT token (same format as your login function)
    const jwttoken = jwt.sign(
      { _id: user._id, role: user.role, email: user.email, name: user.name },
      process.env.JWT_SECRET,
      { expiresIn: '10d' },
    );
    // Send response in same format as your login function
    return res.status(200).json({
      success: true,
      token: jwttoken,
      user: {
        _id: user._id,
        name: user.name,
        role: user.role,
        email: user.email,
      },
      isOnline: user.isOnline,
    });
  } catch (error) {
    console.error('Google Auth Error:', error.message);
    return res.status(500).json({ success: false, error: error.message });
  }
};

export {
  forgotPassword,
  login,
  register,
  resetPassword,
  verify,
  verifynormal,
  googleAuth,
};
