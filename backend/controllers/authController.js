import bcrypt from 'bcrypt';
import crypto from "crypto";
import dotenv from "dotenv";
import jwt from 'jsonwebtoken';
import nodemailer from "nodemailer";
import User from '../models/User.js';

dotenv.config();

// C·∫•u h√¨nh g·ª≠i email
const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: process.env.USER_EMAIL,
    pass: process.env.USER_PASSWORD,
  },
});
// G·ª≠i OTP qua email
const sendOTP = async (email, otp) => {
  try {
    await transporter.sendMail({
      from: process.env.USER_EMAIL,
      to: email,
      subject: "X√°c th·ª±c t√†i kho·∫£n",
      text: `M√£ OTP c·ªßa b·∫°n l√†: ${otp}. M√£ c√≥ hi·ªáu l·ª±c trong 5 ph√∫t.`,
    });
    console.log("‚úÖ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn:", email);
  } catch (error) {
    console.error("‚ùå L·ªói g·ª≠i OTP:", error.message);
    throw new Error("L·ªói g·ª≠i OTP!");
  }
};//
const login = async (req, res) => {
  try {
    const { email, password } = req.body;
    const user = await User.findOne({ email });

    if (!user) {
      return res.status(401).json({ success: false, error: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" });
    }

    if (!user.verified) {
      return res.status(401).json({ success: false, error: "T√†i kho·∫£n ch∆∞a x√°c th·ª±c email!" });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(401).json({ success: false, error: "Sai m·∫≠t kh·∫©u!" });
    }
    user.isOnline = true;
    await user.save();
    const token = jwt.sign(
      { _id: user._id, role: user.role , name: user.name},
      process.env.JWT_SECRET,
      { expiresIn: "10d" }
    );

    return res.status(200).json({
      success: true,
      token,
      user: { _id: user._id, name: user.name, role: user.role, isOnline: user.isOnline },
    });
  } catch (error) {
    console.error("‚ùå L·ªói ƒëƒÉng nh·∫≠p:", error.message);
    return res.status(500).json({ success: false, error: "L·ªói ƒëƒÉng nh·∫≠p!" });
  }
};
// verify email 
const verify = async (req, res) => {
  try {
    const { email, otp } = req.body;

    if (!email || !otp) {
      return res.status(400).json({ success: false, error: "Thi·∫øu email ho·∫∑c OTP!" });
    }

    const user = await User.findOne({ email: email.trim() });

    if (!user) {
      return res.status(400).json({ success: false, error: "Email kh√¥ng t·ªìn t·∫°i!" });
    }

    if (user.verified) {
      return res.status(400).json({ success: false, error: "T√†i kho·∫£n ƒë√£ x√°c th·ª±c!" });
    }

    // Log ƒë·ªÉ debug
    console.log("üì® OTP nh·∫≠p:", otp);
    console.log("üßæ OTP l∆∞u:", user.otp);
    console.log("‚è∞ H·∫øt h·∫°n:", new Date(user.otpExpires), "Hi·ªán t·∫°i:", new Date());

    // Ki·ªÉm tra OTP h·ª£p l·ªá
    if (user.otp !== otp.trim() || Date.now() > user.otpExpires) {
      return res.status(400).json({ success: false, error: "OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!" });
    }

    user.verified = true;
    user.otp = undefined;
user.otpExpires = undefined;
    await user.save();

    const token = jwt.sign(
      { _id: user._id, role: user.role, email: user.email, name: user.name },
      process.env.JWT_SECRET,
      { expiresIn: "10d" }
    );

    return res.status(200).json({
      success: true,
      message: "X√°c th·ª±c th√†nh c√¥ng!",
      token,
      user: {
        _id: user._id,
        name: user.name,
        role: user.role,
        email: user.email
      },
    });
  } catch (error) {
    console.error("‚ùå L·ªói x√°c th·ª±c OTP:", error.message);
    return res.status(500).json({ success: false, error: "L·ªói x√°c th·ª±c OTP!" });
  }
};
//verify normal
const verifynormal = async (req, res) => {
  try {
    // L·∫•y user t·ª´ middleware
    const user = req.user; 

    if (!user) {
      return res.status(401).json({ success: false, error: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!" });
    }

    return res.status(200).json({
      success: true,
      message: "Token h·ª£p l·ªá!",
      user: { _id: user._id, name: user.name, role: user.role, email: user.email },
    });

  } catch (error) {
    console.error("‚ùå L·ªói x√°c minh token:", error);
    return res.status(500).json({ success: false, error: "L·ªói x√°c minh token!" });
  }
};
// register
const register = async (req, res) => {
  try {
    const { name, email, password, phone, role } = req.body;

    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ success: false, error: "Email ƒë√£ t·ªìn t·∫°i!" });
    }

    // Hash m·∫≠t kh·∫©u
    const hashedPassword = await bcrypt.hash(password, 10);

    // Ki·ªÉm tra role h·ª£p l·ªá
    const validRoles = ["customer", "host"];
    const userRole = validRoles.includes(role) ? role : "customer";

    // T·∫°o m√£ OTP v√† th·ªùi gian h·∫øt h·∫°n
    const otp = crypto.randomInt(100000, 999999).toString();
    const otpExpires = Date.now() + 5 * 60 * 1000; // 5 ph√∫t

    // T·∫°o ng∆∞·ªùi d√πng m·ªõi
    const newUser = new User({
      name,
      email,
      password: hashedPassword,
      role: userRole,
      phone,
      verified: false,
      otp,
      otpExpires,
    });
    // G√°n ch√≠nh x√°c:
    // G√°n ch√≠nh x√°c:
newUser.otp = otp;
newUser.otpExpires = otpExpires;

    await newUser.save();

    // G·ª≠i OTP qua email
    try {
      await sendOTP(email, otp);
    } catch (error) {
      await User.deleteOne({ email }); // X√≥a n·∫øu l·ªói g·ª≠i OTP
      return res.status(500).json({ success: false, error: "L·ªói g·ª≠i OTP!" });
    }

    return res.status(201).json({
      success: true,
      message: "ƒêƒÉng k√Ω th√†nh c√¥ng! OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email.",
      userId: newUser._id,
    });

  } catch (error) {
    console.error("‚ùå L·ªói ƒëƒÉng k√Ω:", error.message);
    return res.status(500).json({ success: false, error: "L·ªói ƒëƒÉng k√Ω t√†i kho·∫£n!" });
  }
};

export {login, register,verifynormal, verify};