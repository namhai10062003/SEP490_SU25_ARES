import Contract from "../models/Contract.js";
import Post from "../models/Post.js"; // ƒë·ªÉ l·∫•y gi√° t·ª´ b√†i ƒëƒÉng

export const createContract = async (req, res) => {
  try {
    const {
      postId,
      startDate,
      endDate,
      userId,
      landlordId,
      fullNameA,
      fullNameB,
      cmndA,
      cmndB,
      addressA,
      addressB,
      phoneA,
      phoneB,
      agreed,
      contractTerms,
      depositAmount,
      apartmentCode, // n·∫øu frontend ƒë√£ g·ª≠i
    } = req.body;

    let finalDeposit = depositAmount;

    // N·∫øu kh√¥ng g·ª≠i s·∫µn t·ª´ frontend th√¨ t√≠nh ·ªü backend
    if (!finalDeposit) {
      const post = await Post.findById(postId);
      if (!post) {
        return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y b√†i ƒëƒÉng." });
      }
      finalDeposit = Math.floor(post.price * 0.1); // t√≠nh 10% gi√° thu√™
    }

    const contract = new Contract({
      postId,
      startDate,
      endDate,
      userId,
      landlordId,
      fullNameA,
      fullNameB,
      cmndA,
      cmndB,
      addressA,
      addressB,
      phoneA,
      phoneB,
      agreed,
      contractTerms,
      apartmentCode,
      depositAmount: finalDeposit, // üí∞ l∆∞u ti·ªÅn ƒë·∫∑t c·ªçc
      withdrawableAmount: Math.round(finalDeposit * 0.9),
    });

    await contract.save();

    res.status(201).json({ success: true, message: "T·∫°o h·ª£p ƒë·ªìng th√†nh c√¥ng", data: contract });
  } catch (error) {
    console.error("‚ùå L·ªói t·∫°o h·ª£p ƒë·ªìng:", error);
    res.status(500).json({ success: false, message: "T·∫°o h·ª£p ƒë·ªìng th·∫•t b·∫°i", error });
  }
};

// L·∫•y h·ª£p ƒë·ªìng c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
export const getMyContracts = async (req, res) => {
  try {
    const userId = req.user.id;
    const contracts = await Contract.find({
      $or: [{ userId: userId }, { landlordId: userId }],
    }).sort({ createdAt: -1 });

    const now = new Date();

    const updatedContracts = await Promise.all(
      contracts.map(async (contract) => {
        if (
          contract.status === "approved" &&
          new Date(contract.endDate) < now
        ) {
          contract.status = "expired";
          await contract.save();
        }
        return contract;
      })
    );

    res.status(200).json({ success: true, data: updatedContracts });
  } catch (error) {
    console.error("‚ùå L·ªói getMyContracts:", error);
    res.status(500).json({ success: false, message: "L·ªói server" });
  }
};


// [PUT] Duy·ªát h·ª£p ƒë·ªìng
export const approveContract = async (req, res) => {
  const contract = await Contract.findById(req.params.id);
  if (!contract) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y h·ª£p ƒë·ªìng" });

  contract.status = "approved";
  await contract.save();
  res.json({ message: "ƒê√£ duy·ªát h·ª£p ƒë·ªìng", data: contract });
};

// [PUT] T·ª´ ch·ªëi h·ª£p ƒë·ªìng c√≥ l√Ω do
export const rejectContract = async (req, res) => {
  const contract = await Contract.findById(req.params.id);
  const { reason } = req.body;

  if (!contract) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y h·ª£p ƒë·ªìng" });
  if (!reason || reason.trim() === "") return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p l√Ω do t·ª´ ch·ªëi" });

  contract.status = "rejected";
  contract.rejectionReason = reason;
  await contract.save();

  res.json({ message: "ƒê√£ t·ª´ ch·ªëi h·ª£p ƒë·ªìng", data: contract });
};

// [DELETE] X√≥a h·ª£p ƒë·ªìng
export const deleteContract = async (req, res) => {
  await Contract.findByIdAndDelete(req.params.id);
  res.json({ message: "ƒê√£ x√≥a h·ª£p ƒë·ªìng" });
};
// xem chi ti·∫øt h·ª£p ƒë·ªìng 
// ‚úÖ L·∫•y chi ti·∫øt 1 h·ª£p ƒë·ªìng
export const getContractById = async (req, res) => {
  try {
    const contract = await Contract.findById(req.params.id);
    if (!contract) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y h·ª£p ƒë·ªìng" });
    }
    res.status(200).json({ data: contract });
  } catch (err) {
    res.status(500).json({ message: "L·ªói server", error: err.message });
  }
};
// edit roofi update lai 
export const resubmitContract = async (req, res) => {
  try {
    const { id } = req.params;
    const { startDate, endDate, contractTerms } = req.body;

    const contract = await Contract.findById(id);
    if (!contract) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y h·ª£p ƒë·ªìng" });
    }

    // Ki·ªÉm tra quy·ªÅn ng∆∞·ªùi g·ª≠i
    if (req.user._id.toString() !== contract.userId.toString()) {
      return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠a h·ª£p ƒë·ªìng n√†y" });
    }

    // C·∫≠p nh·∫≠t l·∫°i
    contract.startDate = startDate;
    contract.endDate = endDate;
    contract.contractTerms = contractTerms;
    contract.status = "pending"; // g·ª≠i l·∫°i ƒë·ªÉ ch·ªù duy·ªát
    contract.rejectReason = "";  // xo√° l√Ω do c≈©

    await contract.save();

    res.json({ message: "üì§ ƒê√£ g·ª≠i l·∫°i h·ª£p ƒë·ªìng", data: contract });
  } catch (err) {
    console.error("‚ùå Resubmit error:", err);
    res.status(500).json({ message: "L·ªói khi g·ª≠i l·∫°i h·ª£p ƒë·ªìng" });
  }
};
export const getAllPaidContracts = async (req, res) => {
  try {
    const contracts = await Contract.find({ paymentStatus: "paid" }).sort({ createdAt: -1 });
    res.status(200).json({ success: true, data: contracts });
  } catch (error) {
    console.error("‚ùå L·ªói getAllPaidContracts:", error);
    res.status(500).json({ success: false, message: "L·ªói server" });
  }
};

// h√†m th·ª±c hi·ªán c·∫≠p nh·∫≠t l·∫°i b·∫£n h·ª£p ƒë·ªìng n·∫øu m·∫•y h·ª£p ƒë·ªìng c≈© mu·ªën c·∫≠p nh·∫≠t c√°i s·ªë ti·ªÅn nh·∫≠n dc 
export const updateWithdrawableForAll = async (req, res) => {
  try {
    const contracts = await Contract.find();

    for (const contract of contracts) {
      if (contract.depositAmount && !contract.withdrawableAmount) {
        contract.withdrawableAmount = Math.round(contract.depositAmount * 0.9);

        // ‚ö†Ô∏è N·∫øu status kh√¥ng h·ª£p l·ªá th√¨ s·ª≠a l·∫°i tr∆∞·ªõc khi l∆∞u
        if (!["pending", "approved", "rejected", "expired"].includes(contract.status)) {
          console.warn(`‚ö†Ô∏è H·ª£p ƒë·ªìng ${contract._id} c√≥ status kh√¥ng h·ª£p l·ªá: ${contract.status} ‚Üí ƒëang s·ª≠a v·ªÅ 'approved'`);
          contract.status = "approved"; // ho·∫∑c gi√° tr·ªã ph√π h·ª£p
        }

        await contract.save();
      }
    }

    res.json({ message: "‚úÖ ƒê√£ c·∫≠p nh·∫≠t withdrawableAmount cho t·∫•t c·∫£ h·ª£p ƒë·ªìng" });
  } catch (error) {
    console.error("‚ùå Error:", error);
    res.status(500).json({ message: "‚ùå Server error" });
  }
};
