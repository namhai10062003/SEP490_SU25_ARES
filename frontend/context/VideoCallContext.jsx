import Peer from "peerjs";
import {
  createContext,
  useContext,
  useEffect,
  useRef,
  useState,
} from "react";
import { toast } from "react-toastify";
import { useAuth } from "./authContext";
import { useSocket } from "./socketContext";

const VideoCallContext = createContext();

export const VideoCallProvider = ({ userId, children }) => {
  const [localStream, setLocalStream] = useState(null);
  const [remoteStream, setRemoteStream] = useState(null);
  const [callActive, setCallActive] = useState(false);
  const [incomingCall, setIncomingCall] = useState(null);
  const [peerReady, setPeerReady] = useState(false);
  const [callerInfo, setCallerInfo] = useState(null);
  const [isCalling, setIsCalling] = useState(false); // ‚úÖ NEW

  const { user } = useAuth();
  const { socket } = useSocket();

  const peerRef = useRef();
  const currentCall = useRef();
  const localVideoRef = useRef();
  const remoteVideoRef = useRef();

  // G·ª≠i "register-user" l√™n server
  useEffect(() => {
    if (!socket || !userId) return;

    const register = () => {
      socket.emit("register-user", userId);
      console.log("üì° [socket] G·ª≠i register-user:", userId);
    };

    socket.on("connect", register);
    if (socket.connected) register();

    return () => {
      socket.off("connect", register);
    };
  }, [socket, userId]);

  useEffect(() => {
    if (localVideoRef.current && localStream) {
      localVideoRef.current.srcObject = localStream;
    }
  }, [localStream]);

  useEffect(() => {
    if (remoteVideoRef.current && remoteStream) {
      remoteVideoRef.current.srcObject = remoteStream;
    }
  }, [remoteStream]);

  const createPeer = (customId = null) => {
    return new Peer(customId || undefined, {
      config: {
        iceServers: [{ urls: "stun:stun.l.google.com:19302" }],
      },
    });
  };

  useEffect(() => {
    if (!userId) return;

    let peer = createPeer(userId);
    peerRef.current = peer;

    peer.on("open", (id) => {
      console.log("‚úÖ Peer ƒë√£ k·∫øt n·ªëi v·ªõi ID:", id);
      setPeerReady(true);
    });

    peer.on("error", (err) => {
      console.error("‚ùå L·ªói peer:", err);
      if (err.type === "unavailable-id") {
        console.warn("‚ö†Ô∏è ID b·ªã chi·∫øm, t·∫°o peer m·ªõi...");
        peer = createPeer();
        peerRef.current = peer;
        peer.on("open", (id) => {
          console.log("‚úÖ Peer m·ªõi ƒë√£ k·∫øt n·ªëi v·ªõi ID:", id);
          setPeerReady(true);
        });
        peer.on("call", (call) => {
          console.log("üìû Cu·ªôc g·ªçi ƒë·∫øn t·ª´:", call.peer);
          setIncomingCall(call);
        });
      }
    });

    peer.on("call", (call) => {
      console.log("üìû Cu·ªôc g·ªçi ƒë·∫øn t·ª´:", call.peer);
      setIncomingCall(call);
    });

    navigator.mediaDevices
      .getUserMedia({ video: true, audio: true })
      .then((stream) => {
        setLocalStream(stream);
      })
      .catch((err) => {
console.error("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c camera/mic:", err);
      });

    return () => {
      peer.destroy();
    };
  }, [userId]);

  useEffect(() => {
    if (!socket) return;

    socket.on("call-rejected", ({ from }) => {
      toast.info(`üö´ Ng∆∞·ªùi d√πng ${from} ƒë√£ t·ª´ ch·ªëi cu·ªôc g·ªçi.`);
      setIsCalling(false); // ‚úÖ D·ª´ng g·ªçi n·∫øu b·ªã t·ª´ ch·ªëi
    });

    socket.on("start-call", ({ from, name }) => {
      console.log("üì• Nh·∫≠n th√¥ng tin ng∆∞·ªùi g·ªçi:", name);
      setCallerInfo({ id: from, name });
    });

    socket.on("call-canceled", ({ from }) => {
  toast.info(`üìµ Cu·ªôc g·ªçi t·ª´ ${from} ƒë√£ b·ªã hu·ª∑.`);
  setIncomingCall(null);
  setCallerInfo(null);
});
    return () => {
      socket.off("call-rejected");
      socket.off("start-call");
      socket.off("call-canceled"); 
    };
  }, [socket]);

  const callUser = (remoteUserId) => {
    if (!peerRef.current || !peerReady || !localStream) return;

    if (isCalling) {
      toast.warning("‚ö†Ô∏è B·∫°n ƒëang g·ªçi ng∆∞·ªùi kh√°c, h√£y hu·ª∑ tr∆∞·ªõc.");
      return;
    }

    console.log("üì§ G·ªçi t·ªõi:", remoteUserId);
    setIsCalling(true);

    socket.emit("start-call", {
      from: userId,
      to: remoteUserId,
      name: user?.name || "Ng∆∞·ªùi d√πng",
    });

    const call = peerRef.current.call(remoteUserId, localStream);

    if (!call) {
      console.warn("üö´ Kh√¥ng th·ªÉ t·∫°o cu·ªôc g·ªçi, call undefined.");
      setIsCalling(false);
      return;
    }

    call.on("stream", (remote) => {
      setRemoteStream(remote);
      setCallActive(true);
      setIsCalling(false); // ‚úÖ Cu·ªôc g·ªçi ƒë√£ k·∫øt n·ªëi
    });

    call.on("error", (err) => {
      console.error("‚ùå L·ªói trong cu·ªôc g·ªçi:", err);
      setIsCalling(false);
    });

    call.on("close", () => {
      console.log("üì¥ Cu·ªôc g·ªçi ƒë√£ k·∫øt th√∫c.");
      endCall();
    });

    currentCall.current = call;
  };
  const cancelOutgoingCall = () => {
    if (isCalling && currentCall.current) {
      const targetPeer = currentCall.current.peer;
  
      socket.emit("cancel-call", {
        from: userId,
        to: targetPeer,
      });
  
      currentCall.current?.close();
      setIsCalling(false);
      toast.info("üö´ ƒê√£ hu·ª∑ cu·ªôc g·ªçi.");
      console.log("üìµ Cu·ªôc g·ªçi ƒë√£ b·ªã hu·ª∑.");
    }
  };
  
  const answerCall = () => {
    if (!incomingCall || !localStream) return;

    console.log("‚úÖ Tr·∫£ l·ªùi cu·ªôc g·ªçi...");

    incomingCall.answer(localStream);

    incomingCall.on("stream", (remote) => {
      setRemoteStream(remote);
      setCallActive(true);
    });

    incomingCall.on("close", () => {
      console.log("üì¥ Cu·ªôc g·ªçi ƒë√£ k·∫øt th√∫c.");
      endCall();
    });

    incomingCall.on("error", (err) => {
      console.error("‚ùå L·ªói khi nh·∫≠n cu·ªôc g·ªçi:", err);
    });

    currentCall.current = incomingCall;
    setIncomingCall(null);
    setCallerInfo(null);
  };

  const rejectCall = () => {
if (incomingCall) {
      socket.emit("call-rejected", {
        from: user?.name || userId,
        to: incomingCall.peer,
      });

      toast.info("üö´ B·∫°n ƒë√£ t·ª´ ch·ªëi cu·ªôc g·ªçi.");
      setIncomingCall(null);
      setCallerInfo(null);
    }
  };

  const endCall = () => {
    currentCall.current?.close();
    setCallActive(false);
    setRemoteStream(null);
    setIncomingCall(null);
    setCallerInfo(null);
    setIsCalling(false);
    console.log("üîö K·∫øt th√∫c cu·ªôc g·ªçi.");
  };

  return (
    <VideoCallContext.Provider
      value={{
        localStream,
        remoteStream,
        callUser,
        answerCall,
        rejectCall,
        endCall,
        cancelOutgoingCall, // ‚úÖ Th√™m
        callActive,
        incomingCall,
        peerReady,
        callerInfo,
        isCalling, // ‚úÖ Th√™m
        localVideoRef,
        remoteVideoRef,
      }}
    >
      {children}
    </VideoCallContext.Provider>
  );
};

export const useVideoCall = () => useContext(VideoCallContext);