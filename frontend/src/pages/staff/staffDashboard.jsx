import { jwtDecode } from 'jwt-decode';
import React, { useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

import socket from '../../server/socket';
import h1 from "../images/banner.jpg";

const StaffDashboard = () => {
  const navigate = useNavigate();
  const token = localStorage.getItem('token');
  let userName = 'Ng∆∞·ªùi d√πng';

  if (token) {
    try {
      const decoded = jwtDecode(token);
      userName = decoded?.name || 'Ng∆∞·ªùi d√πng';
    } catch (error) {
      console.error("L·ªói khi gi·∫£i m√£ token:", error);
    }
  }

  useEffect(() => {
    socket.on('staff:new-parking-request', (data) => {
      const message = data['C√≥ ƒëƒÉng k√Ω g·ª≠i xe m·ªõi c·∫ßn duy·ªát'] || 'üì• C√≥ y√™u c·∫ßu g·ª≠i xe m·ªõi';
      const registration = data?.registration || {};
      const { apartmentCode, owner, licensePlate, vehicleType } = registration;

      toast.info(
        `${message}: üöó CƒÉn h·ªô ${apartmentCode} - ${owner} (${licensePlate}, ${vehicleType})`,
        {
          position: 'top-right',
          autoClose: 5000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
          onClick: () => {
            navigate(`/manage-parkinglot`);
          },
        }
      );
    });

    socket.on('new-resident-registered', (resident) => {
      const {
        fullName,
        gender,
        apartmentCode,
        relation,
      } = resident;
      toast.info(
        `üìã Nh√¢n kh·∫©u m·ªõi: ${fullName} (${gender}, ${relation}) ‚Äì CƒÉn h·ªô ${apartmentCode}`,
        {
          position: 'top-right',
          autoClose: 5000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
          onClick: () => {
            navigate('/resident-verify');
          },
        }
      );
    });

    return () => {
      socket.off('staff:new-parking-request');
      socket.off('new-resident-registered');
    };
  }, [navigate]);

  const stats = [
    { title: 'B√†i Post', count: 128, color: 'primary' },
    { title: 'CƒÉn h·ªô & BƒêS', count: 56, color: 'success' },
    { title: 'B√£i ƒë·ªó xe', count: 78, color: 'warning' },
    { title: 'Chi ph√≠', count: 45, color: 'danger' },
  ];

  const users = [
    { name: 'Nguy·ªÖn VƒÉn A', email: 'nguyenvana@gmail.com', role: 'Admin', date: '2024-01-15' },
    { name: 'Tr·∫ßn Th·ªã B', email: 'tranthib@gmail.com', role: 'Nh√¢n vi√™n', date: '2024-02-12' },
    { name: 'Ph·∫°m VƒÉn C', email: 'phamvanc@gmail.com', role: 'Kh√°ch h√†ng', date: '2024-03-10' },
  ];

  return (
    <div className="d-flex min-vh-100 bg-light">
      <ToastContainer />
      {/* Sidebar */}
      <aside className="bg-primary text-white p-4" style={{ minWidth: 240 }}>
        <h2 className="fw-bold mb-4 text-warning text-center">B·∫¢N QU·∫¢N L√ù</h2>
        <nav>
          <ul className="nav flex-column gap-2">
            <li className="nav-item"><Link to="/staff-dashboard" className="nav-link active bg-white text-primary fw-bold">Dashboard</Link></li>
            <li className="nav-item"><Link to="/posts" className="nav-link text-white">Qu·∫£n l√Ω b√†i post</Link></li>
            <li className="nav-item">
              <span className="nav-link text-white fw-bold">Qu·∫£n l√Ω b√£i ƒë·ªó xe ‚ñº</span>
              <ul className="nav flex-column ms-3">
                <li className="nav-item"><Link to="/parkinglot-list" className="nav-link text-white">Danh s√°ch b√£i ƒë·ªó xe</Link></li>
                <li className="nav-item"><Link to="/manage-parkinglot" className="nav-link text-white">Qu·∫£n l√Ω y√™u c·∫ßu g·ª≠i xe</Link></li>
              </ul>
            </li>
            <li className="nav-item"><Link to="/expenses" className="nav-link text-white">Qu·∫£n l√Ω chi ph√≠</Link></li>
            <li className="nav-item"><Link to="/residentVerification" className="nav-link text-white">Qu·∫£n l√Ω ng∆∞·ªùi d√πng</Link></li>
            <li className="nav-item"><Link to="/revenue" className="nav-link text-white">Qu·∫£n l√Ω doanh thu</Link></li>
            <li className="nav-item"><Link to="/resident-verify" className="nav-link text-white">Qu·∫£n l√Ω nh√¢n kh·∫©u</Link></li>
            <li className="nav-item"><Link to="/water-expense" className="nav-link text-white">Th·ªëng k√™ ti√™u th·ª• n∆∞·ªõc</Link></li>
            <li className="nav-item"><Link to="/login" className="nav-link text-white">ƒêƒÉng Xu·∫•t</Link></li>
          </ul>
        </nav>
      </aside>

      {/* Main content */}
      <main className="flex-grow-1 p-4">
        <div className="d-flex justify-content-between align-items-center mb-4">
          <h2 className="fw-bold mb-0">Dashboard</h2>
          <div className="d-flex align-items-center gap-3">
            <input type="text" placeholder="T√¨m ki·∫øm..." className="form-control rounded-pill" style={{ width: 250 }} />
            <span className="fw-bold text-primary">{userName}</span>
          </div>
        </div>

        <h2 className="fw-bold mb-4">B·∫£ng ƒëi·ªÅu khi·ªÉn</h2>

        <div className="row g-4 mb-4">
          {stats.map((item, idx) => (
            <div key={idx} className="col-12 col-md-6 col-lg-3">
              <div className={`card border-0 shadow h-100`}>
                <div className={`card-body text-center border-start border-5 border-${item.color}`}>
                  <div className="text-secondary mb-2">{item.title}</div>
                  <div className="fs-2 fw-bold mb-3">{item.count}</div>
                  <button className={`btn btn-${item.color} rounded-pill px-4`}>Xem chi ti·∫øt</button>
                </div>
              </div>
            </div>
          ))}
        </div>

        <div className="row g-4 mb-4">
          <div className="col-12 col-lg-6">
            <div className="card shadow h-100">
              <div className="card-body text-center">
                <h5 className="fw-bold mb-3">Doanh thu theo th√°ng</h5>
                <img src={h1} alt="Doanh thu" className="img-fluid rounded" style={{ maxHeight: 200, objectFit: "cover" }} />
              </div>
            </div>
          </div>
          <div className="col-12 col-lg-6">
            <div className="card shadow h-100">
              <div className="card-body text-center">
                <h5 className="fw-bold mb-3">Ng∆∞·ªùi ƒëƒÉng m·ªõi theo th√°ng</h5>
                <img src={h1} alt="Ng∆∞·ªùi d√πng m·ªõi" className="img-fluid rounded" style={{ maxHeight: 200, objectFit: "cover" }} />
              </div>
            </div>
          </div>
        </div>

        <div className="card shadow mb-4">
          <div className="card-body">
            <h5 className="fw-bold mb-3">Danh s√°ch ng∆∞·ªùi d√πng</h5>
            <div className="table-responsive">
              <table className="table table-bordered align-middle mb-0">
                <thead className="table-primary">
                  <tr>
                    <th>#</th>
                    <th>T√™n</th>
                    <th>Email</th>
                    <th>Vai tr√≤</th>
                    <th>Ng√†y ƒëƒÉng k√Ω</th>
                  </tr>
                </thead>
                <tbody>
                  {users.map((user, idx) => (
                    <tr key={idx}>
                      <td>{idx + 1}</td>
                      <td>{user.name}</td>
                      <td>{user.email}</td>
                      <td>{user.role}</td>
                      <td>{user.date}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </main>
    </div>
  );
};

export default StaffDashboard;