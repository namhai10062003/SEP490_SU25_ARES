import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import { toast } from 'react-toastify';
import './residentVerifyList.css';

const ResidentVerifyList = () => {
  const [residents, setResidents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [rejectReason, setRejectReason] = useState('');
  const [rejectId, setRejectId] = useState(null);

  const fetchUnverifiedResidents = async () => {
    try {
      const token = localStorage.getItem('token');
      const res = await fetch('http://localhost:4000/api/residents/residents/unverified', {
        headers: { Authorization: `Bearer ${token}` },
      });
      const data = await res.json();
      setResidents(data.residents || []);
    } catch (err) {
      toast.error('‚ùå L·ªói t·∫£i danh s√°ch nh√¢n kh·∫©u');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchUnverifiedResidents();
  }, []);

  const handleVerify = async (id) => {
    if (!window.confirm('‚úÖ X√°c nh·∫≠n ƒë√£ ki·ªÉm tra v√† mu·ªën x√°c minh nh√¢n kh·∫©u n√†y?')) return;

    try {
      const token = localStorage.getItem('token');
      const res = await fetch(`http://localhost:4000/api/residents/verify-by-staff/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
      });

      const result = await res.json();
      if (res.ok) {
        toast.success(result.message || '‚úÖ ƒê√£ x√°c minh nh√¢n kh·∫©u');
        setResidents((prev) => prev.filter((r) => r._id !== id));
      } else {
        toast.error(result.message);
      }
    } catch (err) {
      toast.error('‚ùå C√≥ l·ªói x·∫£y ra khi x√°c minh');
    }
  };

  const handleReject = async () => {
    if (!rejectReason.trim()) {
      toast.warning('‚ùó Vui l√≤ng nh·∫≠p l√Ω do t·ª´ ch·ªëi');
      return;
    }

    try {
      const token = localStorage.getItem('token');
      const res = await fetch(`http://localhost:4000/api/residents/reject-by-staff/${rejectId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({ reason: rejectReason }),
      });

      const result = await res.json();
      if (res.ok) {
        toast.success(result.message || 'üö´ ƒê√£ t·ª´ ch·ªëi nh√¢n kh·∫©u');
        setResidents((prev) => prev.filter((r) => r._id !== rejectId));
        setRejectId(null);
        setRejectReason('');
      } else {
        toast.error(result.message || '‚ùå T·ª´ ch·ªëi th·∫•t b·∫°i');
      }
    } catch (err) {
      toast.error('‚ùå C√≥ l·ªói x·∫£y ra khi t·ª´ ch·ªëi');
    }
  };

  const openImage = (url) => {
    if (url) window.open(url, '_blank', 'noopener,noreferrer');
  };

  return (
    <div className="layout">
      <aside className="sidebar">
        <h2 className="sidebar-title">B·∫¢N QU·∫¢N L√ù</h2>
        <nav className="sidebar-menu">
          <ul>
            <li><Link to="/staff-dashboard">Dashboard</Link></li>
            <li><Link to="/posts">Qu·∫£n l√Ω b√†i post</Link></li>
            <li><Link to="/real-estate">Qu·∫£n l√Ω b·∫•t ƒë·ªông s·∫£n</Link></li>
            <li><Link to="/manage-parkinglot">Qu·∫£n l√Ω b√£i ƒë·ªó xe</Link></li>
            <li><Link to="/expenses">Qu·∫£n l√Ω chi ph√≠</Link></li>
            <li><Link to="/residentVerification">Qu·∫£n l√Ω ng∆∞·ªùi d√πng</Link></li>
            <li><Link to="/resident-verify" className="active">Qu·∫£n l√Ω nh√¢n kh·∫©u</Link></li>
            <li><Link to="/revenue">Qu·∫£n l√Ω doanh thu</Link></li>
            <li><Link to="/login">ƒêƒÉng Xu·∫•t</Link></li>
          </ul>
        </nav>
      </aside>

      <main className="resident-verify-container">
        <h2 className="resident-verify-title">Danh s√°ch nh√¢n kh·∫©u ch·ªù x√°c minh</h2>

        {loading ? (
          <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>
        ) : residents.length === 0 ? (
          <p>Kh√¥ng c√≥ nh√¢n kh·∫©u n√†o c·∫ßn x√°c minh.</p>
        ) : (
          <table className="resident-verify-table">
            <thead>
              <tr>
                <th>H·ªç t√™n</th>
                <th>CƒÉn h·ªô</th>
                <th>Gi·ªõi t√≠nh</th>
                <th>Ng√†y sinh</th>
                <th>Quan h·ªá</th>
                <th>Qu·ªëc t·ªãch</th>
                <th>CCCD</th>
                <th>Ng√†y c·∫•p</th>
                <th>·∫¢nh CCCD</th>
                <th>Thao t√°c</th>
              </tr>
            </thead>
            <tbody>
              {residents.map((r) => (
                <tr key={r._id}>
                  <td>{r.fullName}</td>
                  <td>{r.apartmentId?.apartmentCode || '---'}</td>
                  <td>{r.gender}</td>
                  <td>{r.dateOfBirth ? new Date(r.dateOfBirth).toLocaleDateString('vi-VN') : ''}</td>
                  <td>{r.relationWithOwner}</td>
                  <td>{r.nationality}</td>
                  <td>{r.idNumber}</td>
                  <td>{r.issueDate ? new Date(r.issueDate).toLocaleDateString('vi-VN') : ''}</td>
                  <td>
                    {r.documentFront ? (
                      <img
                        src={r.documentFront}
                        alt="front"
                        className="thumb"
                        onClick={() => openImage(r.documentFront)}
                      />
                    ) : '---'}
                  </td>
                  <td>
                    <button className="btn-verify" onClick={() => handleVerify(r._id)}>X√°c minh</button>
                    <button className="btn-reject" onClick={() => setRejectId(r._id)}>T·ª´ ch·ªëi</button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        )}

        {rejectId && (
          <div className="reject-modal">
            <div className="modal-content">
              <h3>L√Ω do t·ª´ ch·ªëi</h3>
              <textarea
                rows="4"
                placeholder="Nh·∫≠p l√Ω do t·ª´ ch·ªëi..."
                value={rejectReason}
                onChange={(e) => setRejectReason(e.target.value)}
              />
              <div className="modal-actions">
                <button onClick={handleReject}>G·ª≠i t·ª´ ch·ªëi</button>
                <button onClick={() => {
                  setRejectId(null);
                  setRejectReason('');
                }}>Hu·ª∑</button>
              </div>
            </div>
          </div>
        )}
      </main>
    </div>
  );
};

export default ResidentVerifyList;
