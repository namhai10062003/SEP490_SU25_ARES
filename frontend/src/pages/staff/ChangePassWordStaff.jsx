import axios from "axios";
import React, { useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import { toast } from "react-toastify";
import StaffNavbar from "./staffNavbar";
export function ChangePasswordStaff() {
  const navigate = useNavigate();

  const [formData, setFormData] = useState({
    currentPassword: "",
    newPassword: "",
    confirmPassword: "",
  });
  const [showPasswords, setShowPasswords] = useState({
    current: false,
    new: false,
    confirm: false,
  });
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState({ type: "", text: "" });

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
    if (message.text) setMessage({ type: "", text: "" });
  };

  const togglePasswordVisibility = (field) => {
    setShowPasswords((prev) => ({
      ...prev,
      [field]: !prev[field],
    }));
  };

  const validateForm = () => {
    if (!formData.currentPassword) {
      toast.error("Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u hi·ªán t·∫°i");
      return false;
    }
    if (!formData.newPassword) {
      toast.error("Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u m·ªõi");
      return false;
    }
    if (formData.newPassword.length < 6) {
      toast.error("M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±");
      return false;
    }
    if (formData.newPassword !== formData.confirmPassword) {
      toast.error("X√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp");
      return false;
    }
    if (formData.currentPassword === formData.newPassword) {
      toast.error("M·∫≠t kh·∫©u m·ªõi ph·∫£i kh√°c m·∫≠t kh·∫©u hi·ªán t·∫°i");
      return false;
    }
    return true;
  };

  
const handleSubmit = async (e) => {
  e.preventDefault();

  if (!validateForm()) return;

  setLoading(true);

  try {
    const token = localStorage.getItem("token");
    const response = await axios.patch(
      `${import.meta.env.VITE_API_URL}/api/users/changepassword`,
      {
        oldPassword: formData.currentPassword,
        newPassword: formData.newPassword,
      },
      {
        headers: { Authorization: `Bearer ${token}` },
        validateStatus: (status) => status < 500 || status > 500, // tr√°nh throw axios error
      }
    );

    if (response.status === 200) {
      toast.success("ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng! üéâ");
      setFormData({
        currentPassword: "",
        newPassword: "",
        confirmPassword: "",
      });

      // Redirect sau 2s
      setTimeout(() => {
        navigate("/staffDashboard");
      }, 2000);
    } else {
      toast.error(
        response.data.message || "ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i."
      );
    }
  } catch (error) {
    console.error("Change password error:", error);
    const errorMessage =
      error.response?.data?.message ||
      "C√≥ l·ªói x·∫£y ra. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i.";
    toast.error(errorMessage);
  } finally {
    setLoading(false);
  }
};

  const handleReset = () => {
    setFormData({
      currentPassword: "",
      newPassword: "",
      confirmPassword: "",
    });
    setMessage({ type: "", text: "" });
  };

  return (
<div className="d-flex min-vh-100 bg-light">
  <StaffNavbar active="password" />
  <main className="flex-grow-1 p-4">
  <div className="card border-0 shadow-lg rounded-4 overflow-hidden mx-auto" style={{ maxWidth: "600px" }}>      {/* Header Gradient */}
      <div
        className="text-center text-white p-5"
        style={{
          background: "linear-gradient(135deg, #007bff, #00c6ff)",
        }}
      >
        <div
          className="d-inline-flex align-items-center justify-content-center bg-white rounded-circle mb-3"
          style={{ width: "60px", height: "60px" }}
        >
          <span style={{ fontSize: "28px" }}>üîí</span>
        </div>
        <h3 className="fw-bold mb-1">ƒê·ªïi M·∫≠t Kh·∫©u</h3>
        <p className="mb-0">C·∫≠p nh·∫≠t m·∫≠t kh·∫©u ƒë·ªÉ b·∫£o m·∫≠t t√†i kho·∫£n c·ªßa b·∫°n</p>
      </div>

      {/* Body */}
      <div className="card-body p-4 bg-white">
        {message.text && (
          <div
            className={`alert ${
              message.type === "success" ? "alert-success" : "alert-danger"
            } rounded-3 py-2`}
          >
            {message.type === "success" ? "‚úÖ" : "‚ùå"} {message.text}
          </div>
        )}

        <form onSubmit={handleSubmit}>
          {/* Current Password */}
          <div className="mb-3">
            <label className="form-label fw-semibold">M·∫≠t kh·∫©u hi·ªán t·∫°i *</label>
            <div className="input-group">
              <input
                type={showPasswords.current ? "text" : "password"}
                name="currentPassword"
                value={formData.currentPassword}
                onChange={handleInputChange}
                className="form-control"
                placeholder="Nh·∫≠p m·∫≠t kh·∫©u hi·ªán t·∫°i"
              />
              <button
                type="button"
                className="btn btn-outline-secondary"
                onClick={() => togglePasswordVisibility("current")}
              >
                {showPasswords.current ? "üôà" : "üëÅÔ∏è"}
              </button>
            </div>
          </div>

          {/* New Password */}
          <div className="mb-3">
            <label className="form-label fw-semibold">M·∫≠t kh·∫©u m·ªõi *</label>
            <div className="input-group">
              <input
                type={showPasswords.new ? "text" : "password"}
                name="newPassword"
                value={formData.newPassword}
                onChange={handleInputChange}
                className="form-control"
                placeholder="Nh·∫≠p m·∫≠t kh·∫©u m·ªõi"
              />
              <button
                type="button"
                className="btn btn-outline-secondary"
                onClick={() => togglePasswordVisibility("new")}
              >
                {showPasswords.new ? "üôà" : "üëÅÔ∏è"}
              </button>
            </div>
          </div>

          {/* Confirm Password */}
          <div className="mb-3">
            <label className="form-label fw-semibold">
              X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi *
            </label>
            <div className="input-group">
              <input
                type={showPasswords.confirm ? "text" : "password"}
                name="confirmPassword"
                value={formData.confirmPassword}
                onChange={handleInputChange}
                className="form-control"
                placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u m·ªõi"
              />
              <button
                type="button"
                className="btn btn-outline-secondary"
                onClick={() => togglePasswordVisibility("confirm")}
              >
                {showPasswords.confirm ? "üôà" : "üëÅÔ∏è"}
              </button>
            </div>
          </div>

          {/* Password Requirements */}
          <div
            className="rounded-3 p-3 text-white small mb-4"
            style={{ background: "linear-gradient(135deg, #007bff, #00c6ff)" }}
          >
            <strong>üõ°Ô∏è Y√™u c·∫ßu m·∫≠t kh·∫©u:</strong>
            <ul className="mb-0 mt-2">
              <li>T·ªëi thi·ªÉu 6 k√Ω t·ª±</li>
              <li>N√™n bao g·ªìm ch·ªØ hoa, ch·ªØ th∆∞·ªùng v√† s·ªë</li>
              <li>Kh√¥ng d√πng th√¥ng tin c√° nh√¢n d·ªÖ ƒëo√°n</li>
              <li>Kh√°c ho√†n to√†n v·ªõi m·∫≠t kh·∫©u hi·ªán t·∫°i</li>
            </ul>
          </div>

          {/* Buttons */}
          <div className="d-flex justify-content-between">
            <Link
              to="/staff-dashboard"
              className="btn btn-outline-secondary px-4"
            >
              ‚¨Ö Quay L·∫°i
            </Link>
            <button
              type="submit"
              className="btn text-white px-4"
              style={{
                background: "linear-gradient(135deg, #007bff, #00c6ff)",
              }}
              disabled={loading}
            >
              {loading ? (
                <>
                  <span className="spinner-border spinner-border-sm me-2"></span>
                  ƒêang x·ª≠ l√Ω...
                </>
              ) : (
                "C·∫≠p Nh·∫≠t"
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  </main>
</div>

  );
}

export default ChangePasswordStaff;
