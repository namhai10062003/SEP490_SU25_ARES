import axios from "axios";
import React, { useEffect, useState } from "react";
import { confirmAlert } from 'react-confirm-alert';
import 'react-confirm-alert/src/react-confirm-alert.css';
import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import StaffNavbar from "./staffNavbar";
const API_URL = import.meta.env.VITE_API_URL || "https://api.ares.io.vn";

const TYPE_LABELS = {
    1: "Chi ph√≠ qu·∫£n l√Ω",
    3: "Ph√≠ d·ªãch v·ª• kh√°c",
    4: "Ph√≠ ti·ªán √≠ch",
};

const Expenses = () => {
    const [expenses, setExpenses] = useState([]);
    const [loading, setLoading] = useState(true);
    const [addType, setAddType] = useState("");
    const [addLabel, setAddLabel] = useState("");
    const [addPrice, setAddPrice] = useState("");
    const [apartmentFees, setApartmentFees] = useState([]);
    const [loadingFees, setLoadingFees] = useState(true);
    const [filterMonth, setFilterMonth] = useState("");
    const [currentPage, setCurrentPage] = useState(1);
    const [filterText, setFilterText] = useState("");
    const [filterStatus, setFilterStatus] = useState("all");
    const [priceError, setPriceError] = useState('');
    const rowsPerPage = 10;

    const formattedFilterMonth = filterMonth
        ? (() => {
            const [year, month] = filterMonth.split("-");
            return `${month}/${year}`; // th√†nh "06/2025"
        })()
        : null;

        const handlePriceChange = (e) => {
            const value = e.target.value;
        
            // Cho ph√©p x√≥a √¥ ho·∫∑c nh·∫≠p h·ª£p l·ªá (> 0)
            if (value === '' || (/^[0-9]*$/.test(value) && Number(value) > 0)) {
                setAddPrice(value);
                setPriceError('');
            } else {
                setAddPrice(value);
                setPriceError('Gi√° ph·∫£i l·ªõn h∆°n 0');
            }
        };


    // console.log("Filter month:", formattedFilterMonth);
    // console.log("All fee months:", apartmentFees.map((f) => f.month));
    // console.log("Filtered fee months:", filteredFees.map((f) => f.month));

    const getFilteredFees = () => {
        return apartmentFees.filter(fee => {
            const matchesMonth =
                !filterMonth || fee.month === `${filterMonth.split("-")[1]}/${filterMonth.split("-")[0]}`;

            const search = filterText.trim().toLowerCase();
            const matchesText =
                !search ||
                fee.apartmentCode.toLowerCase().includes(search) ||
                fee.ownerName.toLowerCase().includes(search);

            const matchesStatus =
                filterStatus === "all" || fee.paymentStatus === filterStatus;

            return matchesMonth && matchesText && matchesStatus;
        }).sort((a, b) => {
            const dateA = new Date(`01/${a.month}`);
            const dateB = new Date(`01/${b.month}`);
            return dateB - dateA;
        });
    };


    const filteredFees = getFilteredFees();


    const totalPages = Math.ceil(filteredFees.length / rowsPerPage);
    const paginatedFees = filteredFees.slice(
        (currentPage - 1) * rowsPerPage,
        currentPage * rowsPerPage
    );


    useEffect(() => {
        fetchExpenses();
        fetchApartmentFees();
    }, []);

    const fetchExpenses = async () => {
        setLoading(true);
        try {
            const res = await axios.get(`${API_URL}/api/expenses`);
            setExpenses(res.data);
        } catch (err) {
            toast.error("L·ªói t·∫£i d·ªØ li·ªáu chi ph√≠!");
        }
        setLoading(false);
    };

    const fetchApartmentFees = async () => {
        try {
            const res = await axios.get(`${API_URL}/api/fees`);
            setApartmentFees(res.data.data || []);
        } catch (err) {
            console.error("L·ªói khi l·∫•y d·ªØ li·ªáu chi ph√≠ cƒÉn h·ªô:", err);
            toast.error("L·ªói l·∫•y d·ªØ li·ªáu ph√≠ t·ªïng h·ª£p!");
        }
        setLoadingFees(false);
    };

    const handleDelete = async (id) => {
        confirmAlert({
          title: 'X√°c nh·∫≠n xo√° chi ph√≠',
          message: 'B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a lo·∫°i chi ph√≠ n√†y?',
          buttons: [
            {
              label: 'C√≥',
              onClick: async () => {
                try {
                  await axios.delete(`${API_URL}/api/expenses/${id}`);
                  toast.success("üóëÔ∏è ƒê√£ x√≥a chi ph√≠!");
                  fetchExpenses(); // Refresh l·∫°i danh s√°ch
                } catch (err) {
                  toast.error("‚ùå X√≥a th·∫•t b·∫°i!");
                }
              }
            },
            {
              label: 'Kh√¥ng',
              onClick: () => { /* Kh√¥ng l√†m g√¨ n·∫øu h·ªßy */ }
            }
          ]
        });
      };


      const handleAdd = async (e) => {
        e.preventDefault();
    
        if (!addType || !addLabel || !addPrice) {
            toast.warn("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");
            return;
        }
    
        if (Number(addPrice) <= 0) {
            setPriceError("Gi√° ph·∫£i l·ªõn h∆°n 0");
            toast.warn("Gi√° ph·∫£i l·ªõn h∆°n 0!");
            return;
        }
    
        try {
            await axios.post(`${API_URL}/api/expenses`, {
                type: Number(addType),
                label: addLabel,
                price: Number(addPrice),
            });
            toast.success("Th√™m chi ph√≠ th√†nh c√¥ng!");
            setAddType("");
            setAddLabel("");
            setAddPrice("");
            setPriceError(""); // Reset l·ªói sau khi th√†nh c√¥ng
            fetchExpenses();
        } catch (err) {
            const msg = err?.response?.data?.error || "Th√™m chi ph√≠ th·∫•t b·∫°i!";
            toast.error(msg);
        }
    };    
    

    const grouped = expenses.reduce((acc, exp) => {
        if (!acc[exp.label]) acc[exp.label] = [];
        acc[exp.label].push(exp);
        return acc;
    }, {});

    return (
        <div className="d-flex min-vh-100 bg-light">
            {/* <ToastContainer position="top-right" autoClose={2000} /> */}
            <StaffNavbar />

            <main className="flex-grow-1 p-4">
                <h2 className="fw-bold mb-4">Qu·∫£n l√Ω chi ph√≠ cƒÉn h·ªô</h2>


                {/* Form Th√™m Chi Ph√≠ */}
                <form
                    onSubmit={handleAdd}
                    className="row g-2 align-items-center mb-4"
                    style={{ maxWidth: 600 }}
                >
                    <div className="col-md-3">
                        <select
                            className="form-select"
                            value={addType}
                            onChange={(e) => setAddType(e.target.value)}
                            required
                        >
                            <option value="">Ch·ªçn lo·∫°i chi ph√≠</option>
                            <option value="1">Chi ph√≠ qu·∫£n l√Ω</option>
                            <option value="3">Ph√≠ d·ªãch v·ª• kh√°c</option>
                            <option value="4">Ph√≠ ti·ªán √≠ch</option>
                        </select>
                    </div>
                    <div className="col-md-4">
                        <input
                            type="text"
                            className="form-control"
                            placeholder="T√™n T√≤a nh√†"
                            value={addLabel}
                            onChange={(e) => setAddLabel(e.target.value)}
                            required
                        />
                    </div>
                    <div className="col-md-3">
  <input
    type="number"
    className={`form-control ${priceError ? 'is-invalid' : ''}`}
    placeholder="Gi√° (VND/m¬≤)"
    value={addPrice}
    onChange={handlePriceChange}
    min={1}
    required
  />
  {priceError && <div className="invalid-feedback">{priceError}</div>}
</div>


                    <div className="col-md-2">
                        <button className="btn btn-success w-100" type="submit">
                            Th√™m m·ªõi
                        </button>
                    </div>
                </form>

                {/* Danh s√°ch chi ph√≠ */}
                {loading ? (
                    <div className="text-secondary">ƒêang t·∫£i d·ªØ li·ªáu...</div>
                ) : expenses.length === 0 ? (
                    <div className="text-secondary">Kh√¥ng c√≥ d·ªØ li·ªáu chi ph√≠.</div>
                ) : (
                    <div className="d-flex flex-wrap gap-4 justify-content-center">
                        {Object.entries(grouped).map(([label, items]) => (
                            <div
                                key={label}
                                className="bg-white shadow-sm rounded p-4"
                                style={{ minWidth: 320, maxWidth: 420 }}
                            >
                                <h5 className="text-primary fw-bold mb-3">{label}</h5>
                                <table className="table table-bordered table-sm mb-0">
                                    <thead className="table-light">
                                        <tr>
                                            <th>Lo·∫°i ph√≠</th>
                                            <th className="text-end">Gi√°</th>
                                            <th></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        {items.map((exp) => (
                                            <tr key={exp._id}>
                                                <td>{TYPE_LABELS[exp.type] || `Lo·∫°i ${exp.type}`}</td>
                                                <td className="text-end text-primary fw-bold">
                                                    {exp.price.toLocaleString()}{" "}
                                                    {exp.type === 1 ? "VND/m¬≤" : "VND/th√°ng"}
                                                </td>
                                                <td className="text-center">
                                                    <button
                                                        className="btn btn-danger btn-sm"
                                                        onClick={() => handleDelete(exp._id)}
                                                    >
                                                        X√≥a
                                                    </button>
                                                </td>
                                            </tr>
                                        ))}
                                    </tbody>
                                </table>
                            </div>
                        ))}
                    </div>
                )}

                <p className="mt-4">
                    <strong>Ghi ch√∫:</strong> Gi√° qu·∫£n l√Ω cƒÉn h·ªô ƒë∆∞·ª£c t√≠nh t·ª± ƒë·ªông theo di·ªán t√≠ch v√† t√≤a nh√†.
                </p>

                <button
                    className="btn btn-outline-warning mb-3"
                    onClick={async () => {
                        try {
                            await axios.post(`${API_URL}/api/fees/calculate`);
                            toast.success("ƒê√£ t√≠nh l·∫°i ph√≠!");
                            fetchApartmentFees();
                        } catch (err) {
                            toast.error("L·ªói khi t√≠nh l·∫°i ph√≠!");
                        }
                    }}
                >
                    T√≠nh l·∫°i ph√≠ t·ªïng h·ª£p
                </button>

                <hr className="my-4" />

                <h4 className="fw-bold text-dark mb-3">
                    B·∫£ng chi ph√≠ t·ªïng h·ª£p t·ª´ng cƒÉn h·ªô theo th√°ng
                </h4>

                <div className="row g-3 mb-3 align-items-end">
                    {/* B·ªô l·ªçc theo th√°ng */}
                    <div className="col-md-2">
                        <label className="form-label fw-bold">L·ªçc theo th√°ng</label>
                        <input
                            type="month"
                            className="form-control"
                            value={filterMonth}
                            onChange={(e) => setFilterMonth(e.target.value)}
                        />
                    </div>

                    {/* B·ªô l·ªçc theo m√£ cƒÉn h·ªô ho·∫∑c t√™n ch·ªß h·ªô */}
                    <div className="col-md-3">
                        <label className="form-label fw-bold">L·ªçc theo m√£ cƒÉn h·ªô ho·∫∑c t√™n ch·ªß h·ªô</label>
                        <input
                            type="text"
                            className="form-control"
                            placeholder="Nh·∫≠p m√£ cƒÉn h·ªô ho·∫∑c t√™n ch·ªß h·ªô..."
                            value={filterText}
                            onChange={(e) => setFilterText(e.target.value)}
                        />
                    </div>

                    {/* B·ªô l·ªçc theo tr·∫°ng th√°i thanh to√°n */}
                    <div className="col-md-2">
                        <label className="form-label fw-bold">L·ªçc tr·∫°ng th√°i</label>
                        <select
                            className="form-select"
                            value={filterStatus}
                            onChange={(e) => setFilterStatus(e.target.value)}
                        >
                            <option value="all">T·∫•t c·∫£</option>
                            <option value="unpaid">Ch∆∞a thanh to√°n</option>
                            <option value="paid">ƒê√£ thanh to√°n</option>
                        </select>
                    </div>
                </div>



                <div className="table-responsive">
                    {loadingFees ? (
                        <div className="text-secondary">ƒêang t·∫£i d·ªØ li·ªáu chi ph√≠...</div>
                    ) : filteredFees.length === 0 ? (
                        <div className="text-secondary">Kh√¥ng c√≥ d·ªØ li·ªáu chi ph√≠ cƒÉn h·ªô.</div>
                    ) : (
                        <>
                            <table className="table table-bordered table-striped table-hover">
                                <thead className="table-primary">
                                    <tr>
                                        <th>M√£ cƒÉn h·ªô</th>
                                        <th>Ch·ªß h·ªô</th>
                                        <th>Th√°ng</th>
                                        <th>Ph√≠ qu·∫£n l√Ω</th>
                                        <th>Ph√≠ n∆∞·ªõc</th>
                                        <th>Ph√≠ g·ª≠i xe</th>
                                        <th className="text-end">T·ªïng c·ªông</th>
                                        <th className="text-end">Tr·∫°ng th√°i</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {paginatedFees.map((row, index) => (
                                        <tr key={index}>
                                            <td>{row.apartmentCode}</td>
                                            <td>{row.ownerName}</td>
                                            <td>
                                                {(() => {
                                                    const m = new Date(row.month);
                                                    return isNaN(m)
                                                        ? row.month
                                                        : `${(m.getMonth() + 1)
                                                            .toString()
                                                            .padStart(2, "0")}/${m.getFullYear()}`;
                                                })()}
                                            </td>
                                            <td>{row.managementFee?.toLocaleString()} ƒë</td>
                                            <td>{row.waterFee?.toLocaleString()} ƒë</td>
                                            <td>{row.parkingFee?.toLocaleString()} ƒë</td>
                                            <td className="text-end fw-bold text-primary">
                                                {row.total?.toLocaleString()} ƒë
                                            </td>
                                            <td className="text-end">
    {(row.paymentStatus || "").toLowerCase().trim() === "paid" ? (
        <span className="text-success">‚úîÔ∏è ƒê√£ thanh to√°n</span>
    ) : (
        <span className="text-danger">‚ùå Ch∆∞a thanh to√°n</span>
    )}
</td>

                                        </tr>
                                    ))}
                                </tbody>
                            </table>

                            {/* Ph√¢n trang */}
                            {totalPages > 1 && (
                                <div className="d-flex justify-content-center mt-3">
                                    <nav>
                                        <ul className="pagination">
                                            {Array.from({ length: totalPages }, (_, i) => (
                                                <li
                                                    key={i}
                                                    className={`page-item ${currentPage === i + 1 ? "active" : ""
                                                        }`}
                                                >
                                                    <button
                                                        className="page-link"
                                                        onClick={() => setCurrentPage(i + 1)}
                                                    >
                                                        {i + 1}
                                                    </button>
                                                </li>
                                            ))}
                                        </ul>
                                    </nav>
                                </div>
                            )}
                        </>
                    )}
                </div>
            </main>
        </div>
    );
};

export default Expenses;
