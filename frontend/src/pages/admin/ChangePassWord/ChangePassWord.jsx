import axios from "axios";
import React, { useState } from "react";
import { Link } from "react-router-dom";
import { toast } from "react-toastify";
function ChangePassword() {
  const [formData, setFormData] = useState({
    currentPassword: "",
    newPassword: "",
    confirmPassword: "",
  });
  const [showPasswords, setShowPasswords] = useState({
    current: false,
    new: false,
    confirm: false,
  });
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState({ type: "", text: "" });

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
    if (message.text) setMessage({ type: "", text: "" });
  };

  const togglePasswordVisibility = (field) => {
    setShowPasswords((prev) => ({
      ...prev,
      [field]: !prev[field],
    }));
  };

  const validateForm = () => {
    if (!formData.currentPassword) {
      toast.error("Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u hi·ªán t·∫°i");
      return false;
    }
    if (!formData.newPassword) {
      toast.error("Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u m·ªõi");
      return false;
    }
    if (formData.newPassword.length < 6) {
      toast.error("M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±");
      return false;
    }
    if (formData.newPassword !== formData.confirmPassword) {
      toast.error("X√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp");
      return false;
    }
    if (formData.currentPassword === formData.newPassword) {
      toast.error("M·∫≠t kh·∫©u m·ªõi ph·∫£i kh√°c m·∫≠t kh·∫©u hi·ªán t·∫°i");
      return false;
    }
    return true;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!validateForm()) return;
  
    setLoading(true);
  
    try {
      const token = localStorage.getItem("token");
      const response = await axios.patch(
        `${import.meta.env.VITE_API_URL}/api/users/changepassword`,
        {
          oldPassword: formData.currentPassword,
          newPassword: formData.newPassword,
        },
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );
  
      if (response.status === 200) {
        toast.success("ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng! üéâ");
        setFormData({
          currentPassword: "",
          newPassword: "",
          confirmPassword: "",
        });
      } else {
        toast.error(
          response.data.message || "ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i."
        );
      }
    } catch (error) {
      console.error("Change password error:", error);
  
      // ‚úÖ l·∫•y message t·ª´ backend n·∫øu c√≥
      const errorMessage =
        error.response?.data?.message ||
        "C√≥ l·ªói x·∫£y ra. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i.";
  
      toast.error(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="container min-vh-100 d-flex justify-content-center align-items-center bg-light py-5">
      <div className="card border-0 shadow-lg rounded-4" style={{ maxWidth: "600px", width: "100%" }}>
        
        {/* Header gradient */}
        <div className="text-center text-white rounded-top-4 py-4 px-3" 
             style={{ background: "linear-gradient(135deg, #0d6efd, #00c6ff)" }}>
          <div className="bg-white bg-opacity-25 rounded-circle d-flex align-items-center justify-content-center mx-auto mb-3" 
               style={{ width: "70px", height: "70px", fontSize: "30px" }}>
            üîí
          </div>
          <h3 className="fw-bold mb-1">ƒê·ªïi M·∫≠t Kh·∫©u</h3>
          <p className="mb-0">C·∫≠p nh·∫≠t m·∫≠t kh·∫©u ƒë·ªÉ b·∫£o m·∫≠t t√†i kho·∫£n c·ªßa b·∫°n</p>
        </div>

        <div className="card-body p-4">
          {/* Th√¥ng b√°o */}
          {message.text && (
            <div
              className={`alert ${
                message.type === "success" ? "alert-success" : "alert-danger"
              } d-flex align-items-center`}
              role="alert"
            >
              {message.type === "success" ? "‚úÖ" : "‚ùå"} {message.text}
            </div>
          )}

          <form onSubmit={handleSubmit}>
            {/* Current Password */}
            <div className="mb-3">
              <label className="form-label fw-semibold">M·∫≠t kh·∫©u hi·ªán t·∫°i *</label>
              <div className="input-group">
                <input
                  type={showPasswords.current ? "text" : "password"}
                  name="currentPassword"
                  value={formData.currentPassword}
                  onChange={handleInputChange}
                  className="form-control"
                  placeholder="Nh·∫≠p m·∫≠t kh·∫©u hi·ªán t·∫°i"
                />
                <button
                  type="button"
                  className="btn btn-outline-secondary"
                  onClick={() => togglePasswordVisibility("current")}
                >
                  {showPasswords.current ? "üôà" : "üëÅÔ∏è"}
                </button>
              </div>
            </div>

            {/* New Password */}
            <div className="mb-3">
              <label className="form-label fw-semibold">M·∫≠t kh·∫©u m·ªõi *</label>
              <div className="input-group">
                <input
                  type={showPasswords.new ? "text" : "password"}
                  name="newPassword"
                  value={formData.newPassword}
                  onChange={handleInputChange}
                  className="form-control"
                  placeholder="Nh·∫≠p m·∫≠t kh·∫©u m·ªõi (t·ªëi thi·ªÉu 6 k√Ω t·ª±)"
                />
                <button
                  type="button"
                  className="btn btn-outline-secondary"
                  onClick={() => togglePasswordVisibility("new")}
                >
                  {showPasswords.new ? "üôà" : "üëÅÔ∏è"}
                </button>
              </div>
            </div>

            {/* Confirm Password */}
            <div className="mb-3">
              <label className="form-label fw-semibold">X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi *</label>
              <div className="input-group">
                <input
                  type={showPasswords.confirm ? "text" : "password"}
                  name="confirmPassword"
                  value={formData.confirmPassword}
                  onChange={handleInputChange}
                  className="form-control"
                  placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u m·ªõi"
                />
                <button
                  type="button"
                  className="btn btn-outline-secondary"
                  onClick={() => togglePasswordVisibility("confirm")}
                >
                  {showPasswords.confirm ? "üôà" : "üëÅÔ∏è"}
                </button>
              </div>
            </div>

            {/* Password Requirements */}
            <div className="rounded-3 p-3 mb-4 text-white" 
                 style={{ background: "linear-gradient(135deg, #0d6efd, #00c6ff)" }}>
              <h6 className="fw-bold mb-2">üõ°Ô∏è Y√™u c·∫ßu m·∫≠t kh·∫©u:</h6>
              <ul className="mb-0 small">
                <li>T·ªëi thi·ªÉu 6 k√Ω t·ª±</li>
                <li>N√™n bao g·ªìm ch·ªØ hoa, ch·ªØ th∆∞·ªùng v√† s·ªë</li>
                <li>Kh√¥ng s·ª≠ d·ª•ng th√¥ng tin c√° nh√¢n d·ªÖ ƒëo√°n</li>
                <li>Kh√°c ho√†n to√†n v·ªõi m·∫≠t kh·∫©u hi·ªán t·∫°i</li>
              </ul>
            </div>

            {/* Buttons */}
            <div className="d-flex justify-content-between">
              <Link to="/admin-dashboard" className="btn btn-outline-secondary px-4">
                ‚¨Ö Quay L·∫°i
              </Link>
              <button
                type="submit"
                className="btn btn-primary px-4"
                disabled={loading}
              >
                {loading ? (
                  <>
                    <span className="spinner-border spinner-border-sm me-2"></span>
                    ƒêang x·ª≠ l√Ω...
                  </>
                ) : (
                  "C·∫≠p Nh·∫≠t"
                )}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}

export default ChangePassword;
