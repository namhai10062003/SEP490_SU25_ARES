import React, { useEffect, useState } from "react";
import axios from "axios";
import { toast } from "react-toastify";
import AdminDashboard from "../adminDashboard";

const AdminContactPage = () => {
    const [contacts, setContacts] = useState([]);
    const [loading, setLoading] = useState(false);
    const [filter, setFilter] = useState(""); // l·ªçc tr·∫°ng th√°i

    const loadContacts = async () => {
        setLoading(true);
        try {
          const res = await axios.get(`${import.meta.env.VITE_API_URL}/api/contact/list?status=${filter}`);
          setContacts(res.data.data || []);
        } catch (err) {
          console.error("‚ùå L·ªói khi t·∫£i li√™n h·ªá:", err);
          toast.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch li√™n h·ªá!");
        } finally {
          setLoading(false);
        }
      };
      



    const handleDelete = async (id) => {
        if (!window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën xo√° li√™n h·ªá n√†y?")) return;
        try {
            await axios.delete(`${import.meta.env.VITE_API_URL}/api/contact/list/${id}`);
            toast.success("üóëÔ∏è ƒê√£ xo√° li√™n h·ªá!");
            loadContacts();
        } catch (err) {
            console.error("‚ùå Xo√° th·∫•t b·∫°i:", err);
            toast.error("‚ùå Xo√° li√™n h·ªá th·∫•t b·∫°i!");
        }
    };

    const handleMarkReviewed = async (id) => {
        try {
            await axios.put(`${import.meta.env.VITE_API_URL}/api/contact/list/${id}/status`, {
                status: "reviewed",
            });
            toast.success("‚úÖ ƒê√£ ƒë√°nh d·∫•u ƒë√£ x·ª≠ l√Ω!");
            loadContacts();
        } catch (err) {
            console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:", err);
            toast.error("‚ùå C·∫≠p nh·∫≠t tr·∫°ng th√°i th·∫•t b·∫°i!");
        }
    };


    useEffect(() => {
        loadContacts();
    }, [filter]);

    return (
        <AdminDashboard active="contact">
            <div className="container py-4">
                <div className="bg-primary text-white rounded-4 p-3 mb-4 text-center">
                    <h2 className="mb-0">Qu·∫£n l√Ω Li√™n h·ªá</h2>
                </div>

                {/* L·ªçc tr·∫°ng th√°i (n·∫øu c√≥ status) */}
                <div className="mb-3 d-flex align-items-center gap-2">
  <label className="fw-semibold">L·ªçc tr·∫°ng th√°i:</label>
  <select
    className="form-select w-auto"
    value={filter}
    onChange={(e) => setFilter(e.target.value)}
  >
    <option value="">T·∫•t c·∫£</option> {/* ‚úÖ T·ªïng h·ª£p t·∫•t c·∫£ */}
    <option value="pending">Ch∆∞a x·ª≠ l√Ω</option>
    <option value="reviewed">ƒê√£ x·ª≠ l√Ω</option>
    <option value="archived">ƒê√£ x√≥a</option>
  </select>
</div>


                {loading ? (
                    <div className="text-center py-5">
                        <div className="spinner-border text-primary mb-2"></div>
                        <div>ƒêang t·∫£i d·ªØ li·ªáu...</div>
                    </div>
                ) : (
                    <div className="table-responsive">
                        <table className="table table-bordered table-striped align-middle">
                            <thead className="table-light">
                                <tr>
                                    <th>H·ªç v√† t√™n</th>
                                    <th>Email</th>
                                    <th>N·ªôi dung</th>
                                    <th>Tr·∫°ng th√°i</th>
                                    <th>Thao t√°c</th>
                                </tr>
                            </thead>
                            <tbody>
                                {contacts.length === 0 ? (
                                    <tr>
                                        <td colSpan="5" className="text-center">
                                            Kh√¥ng c√≥ li√™n h·ªá n√†o
                                        </td>
                                    </tr>
                                ) : (
                                    contacts.map((c) => (
                                        <tr key={c._id}>
                                            <td>{c.name}</td>
                                            <td>{c.email}</td>
                                            <td>{c.message}</td>
                                            <td>
                                                <span
                                                    className={`badge ${c.isDeleted
                                                            ? "bg-secondary"
                                                            : c.status === "reviewed"
                                                                ? "bg-success"
                                                                : "bg-warning text-dark"
                                                        }`}
                                                >
                                                    {c.isDeleted
                                                        ? "ƒê√£ xo√°"
                                                        : c.status === "reviewed"
                                                            ? "ƒê√£ x·ª≠ l√Ω"
                                                            : "Ch∆∞a x·ª≠ l√Ω"}
                                                </span>
                                            </td>

                                            <td>
                                                {c.isDeleted ? (
                                                    <span className="text-muted fst-italic">ƒê√£ xo√°</span>
                                                ) : c.status === "reviewed" ? (
                                                    <span className="text-muted fst-italic">ƒê√£ x·ª≠ l√Ω</span>
                                                ) : (
                                                    <>
                                                        <button
                                                            className="btn btn-sm btn-success me-2"
                                                            onClick={() => handleMarkReviewed(c._id)}
                                                        >
                                                            ‚úÖ ƒê√£ x·ª≠ l√Ω
                                                        </button>
                                                        <button
                                                            className="btn btn-sm btn-danger"
                                                            onClick={() => handleDelete(c._id)}
                                                        >
                                                            üóëÔ∏è Xo√°
                                                        </button>
                                                    </>
                                                )}
                                            </td>


                                        </tr>
                                    ))
                                )}
                            </tbody>
                        </table>
                    </div>
                )}
            </div>
        </AdminDashboard>
    );
};

export default AdminContactPage;
