import axios from "axios";
import React, { useEffect, useState } from "react";
import { Button, Form, Modal, Spinner } from "react-bootstrap";
import { toast } from 'react-toastify';
import "react-toastify/dist/ReactToastify.css";
import { useAuth } from '../../../../context/authContext';
const EditVehicleModal = ({ show, onClose, vehicleData,selectedItem, onSave }) => {
    const [formData, setFormData] = useState({
      t√™nCh·ªßS·ªüH·ªØu: "",
      lo·∫°iXe: "",
      bi·ªÉnS·ªëXe: "",
      m√£CƒÉnH·ªô: "",
      gi√°: "",
      ng√†yƒêƒÉngK√Ω: "",
      tr·∫°ngTh√°i: "",
      documentFront: null,
      documentFrontUrl: "",
      documentBack: null,
      documentBackUrl: "",
      removeDocumentFront: false,
      removeDocumentBack: false,
      _id: "",
    });
    const [apartments, setApartments] = useState([]);
    const { user } = useAuth();
    const [frontPreview, setFrontPreview] = useState(null);
    const [backPreview, setBackPreview] = useState(null);
    const [loading, setLoading] = useState(false);
    // G·ªçi API l·∫•y danh s√°ch cƒÉn h·ªô
    useEffect(() => {
      const fetchApartments = async () => {
        try {
          const res = await axios.get(
            `${import.meta.env.VITE_API_URL}/api/apartments`
          );
          const data = res.data.data;
  
          const userId = String(user._id);
  
          // ‚úÖ L·ªçc cƒÉn h·ªô theo user
          const filtered = data.filter((apt) => {
            const isOwner = apt.isOwner && String(apt.isOwner._id) === userId;
            const isRenter = apt.isRenter && String(apt.isRenter._id) === userId;
            if (isRenter) return true; // l√† ng∆∞·ªùi thu√™ th√¨ cho hi·ªÉn th·ªã
            if (isOwner && !apt.isRenter) return true; // l√† ch·ªß s·ªü h·ªØu v√† ch∆∞a c√≥ ng∆∞·ªùi thu√™
            return false;
          });
  
          console.log("üìå Apartments fetched:", data);
          console.log("‚úÖ Apartments filtered:", filtered);
  
          setApartments(filtered);
        } catch (error) {
          console.error("‚ùå L·ªói khi load apartments:", error);
          toast.error("‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu cƒÉn h·ªô");
        }
      };
  
      if (user?._id) {
        fetchApartments();
      }
    }, [user]);
  
    // ‚úÖ Khi vehicleData thay ƒë·ªïi th√¨ load d·ªØ li·ªáu c≈©
    // C·∫≠p nh·∫≠t d·ªØ li·ªáu khi vehicleData thay ƒë·ªïi
  useEffect(() => {
    if (vehicleData) {
      setFormData({
        _id: vehicleData._id || vehicleData.id || "",
        t√™nCh·ªßS·ªüH·ªØu: vehicleData.t√™nCh·ªßS·ªüH·ªØu || "",
        lo·∫°iXe: vehicleData.lo·∫°iXe || "",
        bi·ªÉnS·ªëXe: vehicleData.bi·ªÉnS·ªëXe || "",
        m√£CƒÉnH·ªô: vehicleData.m√£CƒÉnH·ªô || "",
        gi√°: vehicleData.gi√° || "",
        ng√†yƒêƒÉngK√Ω: vehicleData.ng√†yƒêƒÉngK√Ω || "",
        tr·∫°ngTh√°i: vehicleData.tr·∫°ngTh√°i || "",
        documentFront: null,
        documentFrontUrl: vehicleData.·∫£nhTr∆∞·ªõc || "",
        documentBack: null,
        documentBackUrl: vehicleData.·∫£nhSau || "",
        removeDocumentFront: false,
        removeDocumentBack: false,
      });
    }
  }, [vehicleData]);
      
    // C·∫≠p nh·∫≠t preview khi ch·ªçn file m·ªõi
    useEffect(() => {
        if (formData.documentFront) {
          const reader = new FileReader();
          reader.onloadend = () => setFrontPreview(reader.result);
          reader.readAsDataURL(formData.documentFront);
        } else {
          setFrontPreview(formData.documentFrontUrl || null);
        }
      }, [formData.documentFront, formData.documentFrontUrl]);
    
      useEffect(() => {
        if (formData.documentBack) {
          const reader = new FileReader();
          reader.onloadend = () => setBackPreview(reader.result);
          reader.readAsDataURL(formData.documentBack);
        } else {
          setBackPreview(formData.documentBackUrl || null);
        }
      }, [formData.documentBack, formData.documentBackUrl]);
      const handleChange = (e) => {
        const { name, value } = e.target;
      
        setFormData(prev => ({
          ...prev,
          [name]: value,
          // N·∫øu ƒëang ƒë·ªïi lo·∫°i xe, t·ª± g√°n gi√° t∆∞∆°ng ·ª©ng
          gi√°: name === "lo·∫°iXe" ? (value === "√¥ t√¥" ? "800.000VNƒê/ th√°ng" : "80.000VNƒê / th√°ng") : prev.gi√°
        }));
      };
      
      const handleSave = async () => {
        if (!vehicleData) {
          toast.error("‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu xe!");
          return;
        }
      
        setLoading(true); // b·∫≠t loading
      
        try {
          const data = new FormData();
          data.append("_id", vehicleData._id || vehicleData.id);
      
          let hasChange = false;
      
          const keyMap = {
            t√™nCh·ªßS·ªüH·ªØu: "owner",
            lo·∫°iXe: "vehicleType",
            bi·ªÉnS·ªëXe: "licensePlate",
            m√£CƒÉnH·ªô: "apartmentId",
            ng√†yƒêƒÉngK√Ω: "registerDate",
            expireDate: "expireDate",
          };
      
          Object.entries(keyMap).forEach(([frontendKey, backendKey]) => {
            const value = formData[frontendKey];
            const oldValue = vehicleData[frontendKey] || vehicleData[backendKey];
            if (value != null && value !== "" && value !== oldValue) {
              data.append(backendKey, value);
              hasChange = true;
            }
          });
      
          if (formData.documentFront instanceof File) {
            data.append("documentFront", formData.documentFront);
            hasChange = true;
          }
          if (formData.documentBack instanceof File) {
            data.append("documentBack", formData.documentBack);
            hasChange = true;
          }
      
          if (formData.removeDocumentFront) {
            data.append("removeDocumentFront", "true");
            hasChange = true;
          }
          if (formData.removeDocumentBack) {
            data.append("removeDocumentBack", "true");
            hasChange = true;
          }
      
          if (!hasChange) {
            toast.info("‚ÑπÔ∏è Kh√¥ng c√≥ thay ƒë·ªïi ƒë·ªÉ c·∫≠p nh·∫≠t.");
            return;
          }
      
          console.log("üîπ FormData _id:", data.get("_id"));
      
          // N·∫øu onSave l√† async, ƒë·ª£i n√≥ xong m·ªõi t·∫Øt loading
          await onSave(data);
        } catch (error) {
          console.error(error);
          toast.error("‚ùå C√≥ l·ªói x·∫£y ra khi l∆∞u!");
        } finally {
          setLoading(false); // t·∫Øt loading d√π th√†nh c√¥ng hay l·ªói
        }
      };
      
      
      
    // H√†m x√≥a ·∫£nh tr∆∞·ªõc
  const handleRemoveFront = () => {
    setFormData({
      ...formData,
      documentFront: null,
      documentFrontUrl: null,
      removeDocumentFront: true,
    });
  };

  // H√†m x√≥a ·∫£nh sau
  const handleRemoveBack = () => {
    setFormData({
      ...formData,
      documentBack: null,
      documentBackUrl: null,
      removeDocumentBack: true,
    });
  };

  
  return (
    <Modal show={show} onHide={onClose} centered size="lg">
    <Modal.Header closeButton className="bg-primary text-white">
      <Modal.Title>‚úèÔ∏è Ch·ªânh s·ª≠a th√¥ng tin xe</Modal.Title>
    </Modal.Header>
  
    <Modal.Body className="bg-light">
      <Form>
        <div className="row g-3">
          {/* T√™n ch·ªß s·ªü h·ªØu */}
          <div className="col-md-6">
            <Form.Label className="fw-semibold">T√™n ch·ªß s·ªü h·ªØu</Form.Label>
            <Form.Control
              type="text"
              name="t√™nCh·ªßS·ªüH·ªØu"
              value={formData.t√™nCh·ªßS·ªüH·ªØu}
              onChange={handleChange}
              placeholder="Nh·∫≠p t√™n ch·ªß s·ªü h·ªØu"
            />
          </div>
  
          {/* Lo·∫°i xe */}
          <div className="col-md-6">
            <Form.Label className="fw-semibold">Lo·∫°i xe</Form.Label>
            <Form.Select
              name="lo·∫°iXe"
              value={formData.lo·∫°iXe}
              onChange={handleChange}
            >
              <option value="xe m√°y">Xe m√°y</option>
              <option value="√¥ t√¥">√î t√¥</option>
            </Form.Select>
          </div>
  
          {/* Bi·ªÉn s·ªë xe */}
          <div className="col-md-6">
            <Form.Label className="fw-semibold">Bi·ªÉn s·ªë xe</Form.Label>
            <Form.Control
              type="text"
              name="bi·ªÉnS·ªëXe"
              value={formData.bi·ªÉnS·ªëXe}
              onChange={handleChange}
              placeholder="V√≠ d·ª•: 30F-12345"
            />
          </div>
  
          {/* M√£ cƒÉn h·ªô */}
          <div className="col-md-6">
            <Form.Label className="fw-semibold">M√£ cƒÉn h·ªô</Form.Label>
            <Form.Select
              name="apartmentCode"
              value={formData.m√£CƒÉnH·ªô}
              onChange={handleChange}
            >
              <option value="">-- Ch·ªçn cƒÉn h·ªô --</option>
              {apartments.map((apt) => (
                <option key={apt._id} value={apt.apartmentCode}>
                  {apt.apartmentCode}
                </option>
              ))}
            </Form.Select>
          </div>
  
          {/* Gi√° */}
          <div className="col-md-6">
            <Form.Label className="fw-semibold">Gi√°</Form.Label>
            <Form.Control
              type="text"
              name="gi√°"
              value={formData.gi√°}
              onChange={handleChange}
              placeholder="Nh·∫≠p gi√°"
            />
          </div>
  
          {/* Ng√†y ƒëƒÉng k√Ω */}
          <div className="col-md-6">
            <Form.Label className="fw-semibold">Ng√†y ƒëƒÉng k√Ω</Form.Label>
            <Form.Control
              type="date"
              name="ng√†yƒêƒÉngK√Ω"
              value={formData.ng√†yƒêƒÉngK√Ω}
              onChange={handleChange}
            />
          </div>
  
          {/* ·∫¢nh gi·∫•y t·ªù xe tr∆∞·ªõc */}
          <div className="col-12">
            <Form.Label className="fw-semibold">·∫¢nh gi·∫•y t·ªù xe (m·∫∑t tr∆∞·ªõc)</Form.Label>
            <Form.Control
              type="file"
              accept="image/*"
              onChange={(e) => {
                if (e.target.files[0]) {
                  setFormData({
                    ...formData,
                    documentFront: e.target.files[0],
                    removeDocumentFront: false,
                  });
                }
              }}
            />
            {/* ·∫¢nh gi·∫•y t·ªù xe tr∆∞·ªõc */}
{frontPreview && (
  <div className="mt-2 position-relative" style={{ maxWidth: "400px", margin: "auto" }}>
    <img
      src={frontPreview}
      alt="Gi·∫•y t·ªù xe tr∆∞·ªõc"
      className="img-fluid rounded shadow-sm"
      style={{ maxHeight: "200px", objectFit: "contain", display: "block" }}
    />
    <button
      type="button"
      className="btn btn-sm btn-danger position-absolute"
      style={{ top: "5px", right: "5px" }}
      onClick={handleRemoveFront}
    >
      X
    </button>
  </div>
)}
          </div>
  
          {/* ·∫¢nh gi·∫•y t·ªù xe sau */}
          <div className="col-12">
            <Form.Label className="fw-semibold">·∫¢nh gi·∫•y t·ªù xe (m·∫∑t sau)</Form.Label>
            <Form.Control
              type="file"
              accept="image/*"
              onChange={(e) => {
                if (e.target.files[0]) {
                  setFormData({
                    ...formData,
                    documentBack: e.target.files[0],
                    removeDocumentBack: false,
                  });
                }
              }}
            />
            {/* ·∫¢nh gi·∫•y t·ªù xe sau */}
{backPreview && (
  <div className="mt-2 position-relative" style={{ maxWidth: "400px", margin: "auto" }}>
    <img
      src={backPreview}
      alt="Gi·∫•y t·ªù xe sau"
      className="img-fluid rounded shadow-sm"
      style={{ maxHeight: "200px", objectFit: "contain", display: "block" }}
    />
    <button
      type="button"
      className="btn btn-sm btn-danger position-absolute"
      style={{ top: "5px", right: "5px" }}
      onClick={handleRemoveBack}
    >
      X
    </button>
  </div>
)}
          </div>
        </div>
      </Form>
    </Modal.Body>
  
    <Modal.Footer className="bg-light">
      <Button variant="secondary" onClick={onClose}>
        ƒê√≥ng
      </Button>
      <Button variant="primary" onClick={handleSave} disabled={loading}>
        {loading ? (
          <>
            <Spinner
              as="span"
              animation="border"
              size="sm"
              role="status"
              aria-hidden="true"
            />{" "}
            ƒêang l∆∞u...
          </>
        ) : (
          "L∆∞u thay ƒë·ªïi"
        )}
      </Button>
    </Modal.Footer>
  </Modal>
  
  );
};

export default EditVehicleModal;
