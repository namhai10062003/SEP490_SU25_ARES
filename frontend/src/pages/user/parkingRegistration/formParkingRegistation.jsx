import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import Header from '../../../../components/header';
import LoadingModal from '../../../../components/loadingModal';
import { useAuth } from '../../../../context/authContext';
const FormParkingRegistration = () => {
  const { user, logout } = useAuth();
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);
  const [name, setName] = useState(null);
  const [apartments, setApartments] = useState([]);

  const [formData, setFormData] = useState({
    owner: '',
    ownerPhone: '',
    apartmentId: '',
    vehicleType: '',
    licensePlate: '',
    registeredCity: '',
    registeredDistrict: '',
    registerDate: '',
    expireDate: '',
    documentFront: null,
    documentBack: null,
    previewFront: null,
    previewBack: null,
  });

  // L·∫•y danh s√°ch cƒÉn h·ªô
  useEffect(() => {
    setName(user?.name || null);
    (async () => {
      setLoading(true);
      try {
        const r = await fetch(`${import.meta.env.VITE_API_URL}/api/apartments`);
        const data = await r.json();

        const userId = String(user._id);
        const filtered = data.data.filter((apt) => {
          const isOwner = apt.isOwner && String(apt.isOwner._id) === userId;
          const isRenter = apt.isRenter && String(apt.isRenter._id) === userId;
          if (isRenter) return true;
          if (isOwner && !apt.isRenter) return true;
  
          return false;
        });

        setApartments(filtered);
      } catch (err) {
        console.error(err);
        toast.error('‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu cƒÉn h·ªô');
      }finally{
        setLoading(false);
      }
    })();
  }, [user]);

  // X·ª≠ l√Ω input
  const handleChange = (e) => {
    const { name, value, files } = e.target;

    if (files && files.length > 0) {
      const file = files[0];
      const previewUrl = URL.createObjectURL(file);

      setFormData(prev => ({
        ...prev,
        [name]: file,
        [`preview${name === 'documentFront' ? 'Front' : 'Back'}`]: previewUrl
      }));
    } else {
      setFormData(prev => ({ ...prev, [name]: value }));
    }
  };
// xu l√≠ sdt 
const handleChangeIphone = (e) => {
  const { name, value, files } = e.target;

  // üëâ Ch·ªâ cho nh·∫≠p s·ªë n·∫øu l√† √¥ s·ªë ƒëi·ªán tho·∫°i
  if (name === 'ownerPhone') {
    if (!/^\d*$/.test(value)) return; // Kh√¥ng cho nh·∫≠p n·∫øu kh√¥ng ph·∫£i s·ªë
  }

  if (files && files.length > 0) {
    const file = files[0];
    const previewUrl = URL.createObjectURL(file);

    setFormData(prev => ({
      ...prev,
      [name]: file,
      [`preview${name === 'documentFront' ? 'Front' : 'Back'}`]: previewUrl
    }));
  } else {
    setFormData(prev => ({ ...prev, [name]: value }));
  }
};

// Validate ng√†y
const validateParkingForm = () => {
  if (!formData.owner?.trim()) {
    toast.error("‚ùå Nh·∫≠p t√™n ch·ªß s·ªü h·ªØu");
    return false;
  }

  if (!formData.ownerPhone?.trim()) {
    toast.error("‚ùå Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i");
    return false;
  }
  if (!/^(0|\+84)\d{9,10}$/.test(formData.ownerPhone.trim())) {
    toast.error("‚ùå S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá");
    return false;
  }

  // if (!formData.apartmentName?.trim()) {
  //   toast.error("‚ùå Nh·∫≠p t√™n cƒÉn h·ªô");
  //   return false;
  // }

  if (!formData.apartmentId) {
    toast.error("‚ùå Ch·ªçn cƒÉn h·ªô");
    return false;
  }

  

  if (!formData.vehicleType) {
    toast.error("‚ùå Ch·ªçn lo·∫°i xe");
    return false;
  }

  if (!formData.licensePlate?.trim()) {
    toast.error("‚ùå Nh·∫≠p bi·ªÉn s·ªë xe");
    return false;
  }
  
  if (!formData.registeredCity?.trim()) {
    toast.error("‚ùå Nh·∫≠p n∆°i ƒëƒÉng k√Ω (T·ªânh / Th√†nh ph·ªë)");
    return false;
  }

  if (!formData.registeredDistrict?.trim()) {
    toast.error("‚ùå Nh·∫≠p n∆°i ƒëƒÉng k√Ω (Qu·∫≠n / Huy·ªán)");
    return false;
  }

  if (!formData.registerDate) {
    toast.error("‚ùå Ch·ªçn ng√†y ƒëƒÉng k√Ω");
    return false;
  }

  const reg = new Date(formData.registerDate);
  if (isNaN(reg)) {
    toast.error("‚ùå Ng√†y ƒëƒÉng k√Ω kh√¥ng h·ª£p l·ªá");
    return false;
  }

  if (formData.expireDate) {
    const exp = new Date(formData.expireDate);
    if (isNaN(exp)) {
      toast.error("‚ùå Ng√†y h·∫øt h·∫°n kh√¥ng h·ª£p l·ªá");
      return false;
    }
    if (reg > exp) {
      toast.error("‚ùå Ng√†y h·∫øt h·∫°n ph·∫£i sau ng√†y ƒëƒÉng k√Ω");
      return false;
    }
  }

  // // ‚úÖ Check file ƒë√∫ng ki·ªÉu
  // if (!(formData.documentFront instanceof File)) {
  //   toast.error("‚ùå Vui l√≤ng t·∫£i l√™n ·∫£nh m·∫∑t tr∆∞·ªõc gi·∫•y t·ªù xe");
  //   return false;
  // }

  // if (!(formData.documentBack instanceof File)) {
  //   toast.error("‚ùå Vui l√≤ng t·∫£i l√™n ·∫£nh m·∫∑t sau gi·∫•y t·ªù xe");
  //   return false;
  // }

  return true;
};



  // Submit
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!validateParkingForm()) return;
    setLoading(true);
    try {
      const token = localStorage.getItem('token');
      const submission = new FormData();

      submission.append('apartmentId', formData.apartmentId);
      submission.append('owner', formData.owner);
      submission.append('ownerPhone', formData.ownerPhone);
      submission.append('vehicleType', formData.vehicleType);
      submission.append('licensePlate', formData.licensePlate);
      // submission.append('chassisNumber', formData.chassisNumber);
      // submission.append('engineNumber', formData.engineNumber);
      submission.append('registeredCity', formData.registeredCity);
      submission.append('registeredDistrict', formData.registeredDistrict);
      submission.append('registerDate', formData.registerDate);

      if (formData.expireDate) {
        submission.append('expireDate', formData.expireDate);
      }

      if (formData.documentFront) submission.append('documentFront', formData.documentFront);
      if (formData.documentBack) submission.append('documentBack', formData.documentBack);

      const res = await fetch(`${import.meta.env.VITE_API_URL}/api/parkinglot/create-parkinglot`, {
        method: 'POST',
        headers: { Authorization: `Bearer ${token}` },
        body: submission
      });

      const result = await res.json();
      if (!res.ok) throw new Error(result.message || 'ƒêƒÉng k√Ω th·∫•t b·∫°i');

      toast.success('‚úÖ B·∫°n ƒë√£ ƒëƒÉng k√Ω. Vui l√≤ng ƒë·ª£i nh√¢n vi√™n ph√™ duy·ªát.');
      setTimeout(() => navigate('/dichvu/baidoxe'), 2000);

    } catch (err) {
      console.error(err);
      toast.error(err.message || 'C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.');
    }finally {
      setLoading(false);
    }
  };

  // Render
  return (
    <div className="bg-light min-vh-100">
      <Header user={user} name={name} logout={logout} />


      <div className="container py-5">
        <div className="bg-white rounded-4 shadow p-4 mx-auto" style={{ maxWidth: 700 }}>
          <h2 className="fw-bold mb-4 border-start border-4 border-primary ps-3">ƒêƒÉng k√Ω b√£i gi·ªØ xe</h2>

          <form className="row g-3" onSubmit={handleSubmit}>
            {/* Ch·ªß s·ªü h·ªØu */}
            <div className="col-md-6">
              <label className="form-label">Ch·ªß s·ªü h·ªØu *</label>
              <input type="text" name="owner" value={formData.owner} onChange={handleChange} className="form-control" required />
            </div>

            {/* SƒêT ch·ªß s·ªü h·ªØu */}
            <div className="col-md-6">
  <label className="form-label">S·ªë ƒëi·ªán tho·∫°i *</label>
  <input
    type="tel"
    name="ownerPhone"
    value={formData.ownerPhone}
    onChange={handleChange}
    className={`form-control ${formData.ownerPhone && !/^[0-9]{9,11}$/.test(formData.ownerPhone) ? 'is-invalid' : ''}`}
    
    pattern="^[0-9]{9,11}$"
    title="S·ªë ƒëi·ªán tho·∫°i ph·∫£i l√† s·ªë v√† t·ª´ 9 ƒë·∫øn 11 ch·ªØ s·ªë"
  />
  {/* Th√¥ng b√°o l·ªói */}
  {formData.ownerPhone && !/^[0-9]{9,11}$/.test(formData.ownerPhone) && (
    <div className="text-danger mt-1 small">
      S·ªë ƒëi·ªán tho·∫°i ph·∫£i l√† s·ªë v√† t·ª´ 9 ƒë·∫øn 11 ch·ªØ s·ªë
    </div>
  )}
</div>


            {/* CƒÉn h·ªô */}
            <div className="col-md-6">
              <label className="form-label">T√™n cƒÉn h·ªô *</label>
              <select name="apartmentId" value={formData.apartmentId} onChange={handleChange} className="form-select" >
                <option value="">-- Ch·ªçn cƒÉn h·ªô --</option>
                {apartments.map((apt) => (
                  <option key={apt._id} value={apt._id}>{apt.apartmentCode}</option>
                ))}
              </select>
            </div>

            {/* Lo·∫°i xe */}
            <div className="col-md-6">
              <label className="form-label">Lo·∫°i xe *</label>
              <select name="vehicleType" value={formData.vehicleType} onChange={handleChange} className="form-select" >
                <option value="">-- Ch·ªçn lo·∫°i --</option>
                <option value="√¥ t√¥">√î t√¥</option>
                <option value="xe m√°y">Xe m√°y</option>
              </select>
            </div>

            {/* Bi·ªÉn s·ªë */}
            <div className="col-md-6">
              <label className="form-label">Bi·ªÉn s·ªë xe *</label>
              <input type="text" name="licensePlate" value={formData.licensePlate} onChange={handleChange} className="form-control" />
            </div>

            {/* S·ªë khung */}
            {/* <div className="col-md-6">
              <label className="form-label">S·ªë khung</label>
              <input type="text" name="chassisNumber" value={formData.chassisNumber} onChange={handleChange} className="form-control" />
            </div> */}

            {/* S·ªë m√°y */}
            {/* <div className="col-md-6">
              <label className="form-label">S·ªë m√°y</label>
              <input type="text" name="engineNumber" value={formData.engineNumber} onChange={handleChange} className="form-control" />
            </div> */}

            {/* ƒêƒÉng k√Ω t·∫°i */}
            <div className="col-md-6">
              <label className="form-label">ƒêƒÉng k√Ω t·∫°i *</label>
              <div className="row g-2">
                <div className="col">
                  <input type="text" placeholder="T·ªânh / Th√†nh ph·ªë" name="registeredCity" value={formData.registeredCity} onChange={handleChange} className="form-control"  />
                </div>
                <div className="col">
                  <input type="text" placeholder="Qu·∫≠n / Huy·ªán" name="registeredDistrict" value={formData.registeredDistrict} onChange={handleChange} className="form-control"  />
                </div>
              </div>
            </div>

            {/* Ng√†y ƒëƒÉng k√Ω */}
            <div className="col-md-6">
              <label className="form-label">Ng√†y ƒëƒÉng k√Ω *</label>
              <input type="date" name="registerDate" value={formData.registerDate} onChange={handleChange} className="form-control"  />
            </div>

            {/* Ng√†y h·∫øt h·∫°n
            <div className="col-md-6">
              <label className="form-label">Ng√†y h·∫øt h·∫°n</label>
              <input type="date" name="expireDate" value={formData.expireDate} onChange={handleChange} className="form-control" />
            </div> */}

            {/* ·∫¢nh gi·∫•y t·ªù */}
            <div className="col-12">
              <label className="form-label">M·∫∑t tr∆∞·ªõc v√† m·∫∑t sau gi·∫•y t·ªù xe</label>
              <div className="row g-3">
                {/* M·∫∑t tr∆∞·ªõc */}
                <div className="col-md-6">
                  <div className="border border-2 border-primary rounded-3 p-3 bg-light text-center h-100">
                    <span className="fw-semibold">M·∫∑t tr∆∞·ªõc</span>
                    <label className="btn btn-outline-primary btn-sm d-block mt-2">
                      Ch·ªçn ·∫£nh
                      <input type="file" name="documentFront" accept="image/*" onChange={handleChange} hidden />
                    </label>
                    <div className="small text-secondary mt-2">
                      {formData.documentFront ? formData.documentFront.name : 'Ch∆∞a ch·ªçn ·∫£nh'}
                    </div>
                    {formData.previewFront && (
                      <img
                        src={formData.previewFront}
                        alt="Preview tr∆∞·ªõc"
                        className="img-thumbnail mt-2"
                        style={{ maxWidth: 200, borderRadius: 8 }}
                      />
                    )}
                  </div>
                </div>
                {/* M·∫∑t sau */}
                <div className="col-md-6">
                  <div className="border border-2 border-primary rounded-3 p-3 bg-light text-center h-100">
                    <span className="fw-semibold">M·∫∑t sau</span>
                    <label className="btn btn-outline-primary btn-sm d-block mt-2">
                      Ch·ªçn ·∫£nh
                      <input type="file" name="documentBack" accept="image/*" onChange={handleChange} hidden />
                    </label>
                    <div className="small text-secondary mt-2">
                      {formData.documentBack ? formData.documentBack.name : 'Ch∆∞a ch·ªçn ·∫£nh'}
                    </div>
                    {formData.previewBack && (
                      <img
                        src={formData.previewBack}
                        alt="Preview sau"
                        className="img-thumbnail mt-2"
                        style={{ maxWidth: 200, borderRadius: 8 }}
                      />
                    )}
                  </div>
                </div>
              </div>
            </div>

            {/* N√∫t submit */}
            <div className="col-12 d-flex justify-content-center mt-4">
            <button
      type="submit"
      className="btn btn-primary btn-lg px-5 fw-bold d-flex align-items-center justify-content-center"
      onClick={handleSubmit}
      disabled={loading} // disable khi loading
    >
      {loading && (
        <span
          className="spinner-border spinner-border-sm me-2"
          role="status"
          aria-hidden="true"
        ></span>
      )}
      {loading ? "ƒêang ƒëƒÉng k√Ω..." : "ƒêƒÉng K√Ω"}
    </button>
            </div>
          </form>
        </div>
        <footer className="text-center mt-4 text-secondary small">
          ¬© 2025 B√£i gi·ªØ xe
        </footer>
      </div>
      
      {/* Loading modal */}
      {loading && <LoadingModal show={loading} />}
    </div>
  );
};

export default FormParkingRegistration;