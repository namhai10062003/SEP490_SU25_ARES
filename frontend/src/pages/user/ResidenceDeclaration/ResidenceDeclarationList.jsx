import React, { useEffect, useRef, useState } from "react";
import { Button, Form, Modal, Spinner } from "react-bootstrap"; // d√πng react-bootstrap
import { Link } from "react-router-dom";
import { toast } from "react-toastify";
import Header from "../../../../components/header";
import { useAuth } from "../../../../context/authContext";
const ResidenceDeclarationList = () => {
  const { user, logout } = useAuth();
  const [declarations, setDeclarations] = useState([]);
  const [searchText, setSearchText] = useState("");
  const [filterStatus, setFilterStatus] = useState("all");
  const fileInputRef = useRef(null); 
  const [saving, setSaving] = useState(false); 
  const [show, setShow] = useState(false);

  // üîπ State modal
  const [showModal, setShowModal] = useState(false);
const [removingImage, setRemovingImage] = useState(false); //
  const [selectedDeclaration, setSelectedDeclaration] = useState(null);
  const [editForm, setEditForm] = useState({
    fullName: "",
    gender: "",
    dateOfBirth: "",
    relationWithOwner: "",
    nationality: "",
    idNumber: "",
    startDate: "",
    endDate: "",
    documentImage: null
  });

  const fetchDeclarations = async () => {
    try {
      const token = localStorage.getItem("token");
      const res = await fetch(
        `${import.meta.env.VITE_API_URL}/api/residence-declaration/my-declarations`,
        { headers: { Authorization: `Bearer ${token}` } }
      );

      const data = await res.json();
      if (!res.ok) throw new Error(data.message || "L·ªói t·∫£i d·ªØ li·ªáu");
      setDeclarations(data.data || []);
    } catch (err) {
      toast.error(`‚ùå ${err.message}`);
    }
  };

  useEffect(() => {
    fetchDeclarations();
  }, []);

  // üîπ M·ªü modal ch·ªânh s·ª≠a
  const handleEditClick = (declaration) => {
    setSelectedDeclaration(declaration);
    setEditForm({
      fullName: declaration.fullName || "",
      gender: declaration.gender || "",
      dateOfBirth: declaration.dateOfBirth
        ? new Date(declaration.dateOfBirth).toISOString().slice(0, 10)
        : "",
      relationWithOwner: declaration.relationWithOwner || "",
      nationality: declaration.nationality || "",
      idNumber: declaration.idNumber || "",
      startDate: declaration.startDate
        ? new Date(declaration.startDate).toISOString().slice(0, 10)
        : "",
      endDate: declaration.endDate
        ? new Date(declaration.endDate).toISOString().slice(0, 10)
        : "",
      documentImage: null
    });
    setShowModal(true);
  };

  // üîπ Thay ƒë·ªïi input trong modal
  const handleInputChange = (e) => {
    const { name, value, files } = e.target;
    if (files) {
      setEditForm((prev) => ({ ...prev, [name]: files[0] }));
    } else {
      setEditForm((prev) => ({ ...prev, [name]: value }));
    }
  };

  // üîπ L∆∞u ch·ªânh s·ª≠a
  const handleSave = async () => {
    if (!selectedDeclaration) return;
  
    // üîπ Validate t·ª´ng tr∆∞·ªùng b·∫Øt bu·ªôc v·ªõi th√¥ng b√°o ti·∫øng Vi·ªát
if (!editForm.fullName || editForm.fullName.trim() === "") {
  toast.error("‚ùå Vui l√≤ng nh·∫≠p H·ªç v√† t√™n!");
  return;
}

if (!editForm.gender || editForm.gender.trim() === "") {
  toast.error("‚ùå Vui l√≤ng ch·ªçn Gi·ªõi t√≠nh!");
  return;
}

if (!editForm.startDate || editForm.startDate.trim() === "") {
  toast.error("‚ùå Vui l√≤ng ch·ªçn Ng√†y b·∫Øt ƒë·∫ßu!");
  return;
}

if (!editForm.endDate || editForm.endDate.trim() === "") {
  toast.error("‚ùå Vui l√≤ng ch·ªçn Ng√†y k·∫øt th√∫c!");
  return;
}

// üîπ Validate CCCD (n·∫øu nh·∫≠p)
if (editForm.idNumber && !/^\d{12}$/.test(editForm.idNumber.trim())) {
  toast.error("‚ùå S·ªë CCCD kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p ƒë√∫ng 12 ch·ªØ s·ªë.");
  return;
}
    // üîπ Ki·ªÉm tra xem c√≥ g√¨ thay ƒë·ªïi kh√¥ng
    const hasChange = Object.keys(editForm).some((key) => {
      if (key === "documentImage") {
        // N·∫øu documentImage l√† file m·ªõi ho·∫∑c null (x√≥a ·∫£nh c≈©)
        return editForm[key] !== undefined && (
          editForm[key] instanceof File || editForm[key] === null
        );
      }
      const originalValue = selectedDeclaration[key];
      const newValue = editForm[key];
      if (!originalValue && !newValue) return false;
      if (originalValue instanceof Date) {
        return new Date(originalValue).toISOString().slice(0,10) !== newValue;
      }
      return originalValue !== newValue;
    });
  
    if (!hasChange) {
      toast.info("‚ö†Ô∏è B·∫°n ch∆∞a thay ƒë·ªïi g√¨.");
      return;
    }
  
    try {
      const token = localStorage.getItem("token");
      const formData = new FormData();
  
      Object.keys(editForm).forEach((key) => {
        if (editForm[key] !== undefined && key !== "documentImagePreview") {
          if (key === "documentImage") {
            // N·∫øu user x√≥a ·∫£nh, g·ª≠i flag removeOldImage
            if (editForm[key] === null && selectedDeclaration.documentImage) {
              formData.append("removeOldImage", "true");
            } else if (editForm[key] instanceof File) {
              formData.append("documentImage", editForm[key]);
            }
          } else {
            formData.append(key, editForm[key]);
          }
        }
      });
  
      const res = await fetch(
        `${import.meta.env.VITE_API_URL}/api/residence-declaration/${selectedDeclaration._id}`,
        {
          method: "PUT",
          headers: { Authorization: `Bearer ${token}` },
          body: formData
        }
      );
  
      const data = await res.json();
      if (!res.ok) throw new Error(data.message || "L·ªói c·∫≠p nh·∫≠t");
  
      toast.success("‚úÖ C·∫≠p nh·∫≠t h·ªì s∆° th√†nh c√¥ng!");
      setShowModal(false);
      fetchDeclarations(); // reload danh s√°ch
    } catch (err) {
      toast.error(`‚ùå ${err.message}`);
    }
  };
  
  
  
  return (
    <div className="bg-light min-vh-100">
      <Header user={user} name={user?.name} logout={logout} />
      <div className="container py-5">
        <div className="d-flex justify-content-between align-items-center mb-4">
          <h2 className="fw-bold text-primary m-0">
            H·ªì s∆° t·∫°m tr√∫ / t·∫°m v·∫Øng c·ªßa t√¥i
          </h2>
          <Link
            to="/residence-declaration"
            className="btn btn-success rounded-pill fw-semibold"
          >
            + ƒêƒÉng k√Ω t·∫°m tr√∫-t·∫°m v·∫Øng
          </Link>
        </div>

        {/* B·ªô l·ªçc */}
        <div className="row mb-4">
          <div className="col-md-4 mb-2">
            <input
              type="text"
              className="form-control"
              placeholder="üîç T√¨m theo t√™n..."
              value={searchText}
              onChange={(e) => setSearchText(e.target.value)}
            />
          </div>
          <div className="col-md-3 mb-2">
            <select
              className="form-select"
              value={filterStatus}
              onChange={(e) => setFilterStatus(e.target.value)}
            >
              <option value="all">T·∫•t c·∫£ tr·∫°ng th√°i</option>
              <option value="pending">üü° Ch·ªù duy·ªát</option>
              <option value="true">‚úÖ ƒê√£ duy·ªát</option>
              <option value="false">‚ùå ƒê√£ t·ª´ ch·ªëi</option>
            </select>
          </div>
          <div className="col-md-2 mb-2">
            <button
              className="btn btn-outline-secondary w-100"
              onClick={() => {
                setSearchText("");
                setFilterStatus("all");
              }}
            >
              üîÑ X√≥a l·ªçc
            </button>
          </div>
        </div>

        {/* Danh s√°ch */}
        <div className="table-responsive">
          <table className="table table-bordered align-middle">
            <thead className="table-primary">
              <tr>
                <th>H·ªç t√™n</th>
                <th>Ng√†y sinh</th>
                <th>Gi·ªõi t√≠nh</th>
                <th>CƒÉn h·ªô</th>
                <th>Quan h·ªá</th>
                <th>Th·ªùi gian</th>
                <th>Gi·∫•y t·ªù</th>
                <th>Tr·∫°ng th√°i</th>
                <th>L√Ω do t·ª´ ch·ªëi</th>
                <th>H√†nh ƒë·ªông</th>
              </tr>
            </thead>
            <tbody>
              {declarations
                .filter((d) =>
                  d.fullName?.toLowerCase().includes(searchText.toLowerCase())
                )
                .filter((d) =>
                  filterStatus === "all"
                    ? true
                    : d.verifiedByStaff === filterStatus
                )
                .map((d) => (
                  <tr key={d._id}>
                    <td>{d.fullName}</td>
                    <td>
                      {d.dateOfBirth &&
                        new Date(d.dateOfBirth).toLocaleDateString("vi-VN")}
                    </td>
                    <td>{d.gender}</td>
                    <td>{d.apartmentId?.apartmentCode || "‚Äî"}</td>
                    <td>{d.relationWithOwner}</td>
                    <td>
                      {d.startDate
                        ? new Date(d.startDate).toLocaleDateString("vi-VN")
                        : "‚Äî"}{" "}
                      ‚Üí{" "}
                      {d.endDate
                        ? new Date(d.endDate).toLocaleDateString("vi-VN")
                        : "‚Äî"}
                    </td>
                    <td>
      {d.documentImage ? (
        <>
          <Button
            variant="outline-primary"
            size="sm"
            onClick={() => setShow(true)}
          >
            Xem ·∫£nh
          </Button>

          {/* Popup ·∫£nh */}
          <Modal show={show} onHide={() => setShow(false)} centered size="lg">
            <Modal.Body className="text-center">
              <img
                src={d.documentImage}
                alt="Gi·∫•y t·ªù"
                style={{ maxWidth: "100%", maxHeight: "80vh" }}
              />
            </Modal.Body>
          </Modal>
        </>
      ) : (
        <span className="text-muted">Kh√¥ng c√≥</span>
      )}
    </td>
                    <td>
                      {d.verifiedByStaff === "true" ? (
                        <span className="badge bg-success">‚úÖ ƒê√£ duy·ªát</span>
                      ) : d.verifiedByStaff === "false" ? (
                        <span className="badge bg-danger">‚ùå T·ª´ ch·ªëi</span>
                      ) : (
                        <span className="badge bg-warning text-dark">
                          üü° Ch·ªù duy·ªát
                        </span>
                      )}
                    </td>
                    <td>
                      {d.verifiedByStaff === "false" && d.rejectReason && (
                        <span className="text-danger fw-bold">
                          {d.rejectReason}
                        </span>
                      )}
                    </td>
                    <td>
                    <Link
  to={`/residence-declaration/detail/${d._id}`}
  className="d-inline-flex align-items-center gap-1 shadow-sm text-decoration-none"
  style={{
    borderRadius: "0.375rem",
    background: "#0d6efd",
    color: "#fff",
    fontSize: "0.85rem", // gi·∫£m size ch·ªØ
    padding: "0.25rem 0.6rem", // gi·∫£m padding
    transition: "all 0.2s",
  }}
  onMouseEnter={(e) => (e.currentTarget.style.transform = "scale(1.05)")}
  onMouseLeave={(e) => (e.currentTarget.style.transform = "scale(1)")}
>
  <i className="bi bi-eye"></i>
  Xem chi ti·∫øt
</Link>


                      {/* üîπ N√∫t ch·ªânh s·ª≠a n·∫øu tr·∫°ng th√°i l√† t·ª´ ch·ªëi */}
                     {d.verifiedByStaff === "false" && (
  <Button
    size="sm"
    variant="warning"
    className="d-flex align-items-center gap-1 shadow-sm"
    style={{
      borderRadius: "0.375rem", // bo g√≥c m·ªÅm m·∫°i
      transition: "all 0.2s",
    }}
    onMouseEnter={(e) => (e.currentTarget.style.transform = "scale(1.05)")}
    onMouseLeave={(e) => (e.currentTarget.style.transform = "scale(1)")}
    onClick={() => handleEditClick(d)}
  >
    <i className="bi bi-pencil-square"></i> {/* icon b√∫t t·ª´ Bootstrap Icons */}
    Ch·ªânh s·ª≠a
  </Button>
)}

                    </td>
                  </tr>
                ))}
            </tbody>
          </table>
        </div>

        <Modal show={showModal} onHide={() => setShowModal(false)} centered size="lg">
  <Modal.Header closeButton className="bg-primary text-white">
    <Modal.Title>Ch·ªânh s·ª≠a h·ªì s∆°</Modal.Title>
  </Modal.Header>

  <Modal.Body>
    <Form>
      <div className="row g-3">
        <div className="col-md-6">
          <Form.Group>
            <Form.Label>H·ªç t√™n</Form.Label>
            <Form.Control
              type="text"
              name="fullName"
              value={editForm.fullName}
              onChange={handleInputChange}
              placeholder="Nh·∫≠p h·ªç v√† t√™n"
            />
          </Form.Group>
        </div>

        <div className="col-md-6">
          <Form.Group>
            <Form.Label>Gi·ªõi t√≠nh</Form.Label>
            <Form.Select
              name="gender"
              value={editForm.gender}
              onChange={handleInputChange}
            >
              <option value="">Ch·ªçn gi·ªõi t√≠nh</option>
              <option value="Nam">Nam</option>
              <option value="N·ªØ">N·ªØ</option>
            </Form.Select>
          </Form.Group>
        </div>

        <div className="col-md-6">
          <Form.Group>
            <Form.Label>Ng√†y sinh</Form.Label>
            <Form.Control
              type="date"
              name="dateOfBirth"
              value={editForm.dateOfBirth}
              onChange={handleInputChange}
            />
          </Form.Group>
        </div>

        <div className="col-md-6">
          <Form.Group>
            <Form.Label>Quan h·ªá v·ªõi ch·ªß h·ªô</Form.Label>
            <Form.Control
              type="text"
              name="relationWithOwner"
              value={editForm.relationWithOwner}
              onChange={handleInputChange}
            />
          </Form.Group>
        </div>

        <div className="col-md-6">
          <Form.Group>
            <Form.Label>Qu·ªëc t·ªãch</Form.Label>
            <Form.Control
              type="text"
              name="nationality"
              value={editForm.nationality}
              onChange={handleInputChange}
            />
          </Form.Group>
        </div>

        <div className="col-md-6">
          <Form.Group>
            <Form.Label>S·ªë CCCD</Form.Label>
            <Form.Control
              type="text"
              name="idNumber"
              value={editForm.idNumber}
              onChange={handleInputChange}
              placeholder="Nh·∫≠p 12 s·ªë CCCD"
            />
          </Form.Group>
        </div>

        <div className="col-md-6">
          <Form.Group>
            <Form.Label>Th·ªùi gian b·∫Øt ƒë·∫ßu</Form.Label>
            <Form.Control
              type="date"
              name="startDate"
              value={editForm.startDate}
              onChange={handleInputChange}
            />
          </Form.Group>
        </div>

        <div className="col-md-6">
          <Form.Group>
            <Form.Label>Th·ªùi gian k·∫øt th√∫c</Form.Label>
            <Form.Control
              type="date"
              name="endDate"
              value={editForm.endDate}
              onChange={handleInputChange}
            />
          </Form.Group>
        </div>

        <div className="col-12">
          <Form.Group>
            <Form.Label>·∫¢nh gi·∫•y t·ªù (ch·ªâ 1 ·∫£nh)</Form.Label>
            <Form.Control
              type="file"
              name="documentImage"
              accept="image/*"
              ref={fileInputRef}
              onChange={(e) => {
                const file = e.target.files[0];
                if (file) {
                  setEditForm((prev) => ({
                    ...prev,
                    documentImage: file,
                    documentImagePreview: URL.createObjectURL(file),
                  }));
                }
              }}
            />

            {(editForm.documentImagePreview || selectedDeclaration?.documentImage) && (
              <div className="mt-2 position-relative d-inline-block">
                <img
                  src={editForm.documentImagePreview || selectedDeclaration.documentImage}
                  alt="Gi·∫•y t·ªù"
                  className="img-thumbnail"
                  style={{ maxWidth: "200px", maxHeight: "150px" }}
                />
                <button
                  type="button"
                  className="btn btn-sm btn-danger position-absolute top-0 end-0"
                  onClick={async () => {
                    setRemovingImage(true);

                    if (editForm.documentImagePreview) {
                      setEditForm((prev) => ({
                        ...prev,
                        documentImage: null,
                        documentImagePreview: null,
                      }));
                      if (fileInputRef.current) fileInputRef.current.value = "";
                      setRemovingImage(false);
                      return;
                    }

                    if (selectedDeclaration?.documentImage) {
                      try {
                        const token = localStorage.getItem("token");
                        const res = await fetch(
                          `${import.meta.env.VITE_API_URL}/api/residence-declaration/${selectedDeclaration._id}/remove-image`,
                          {
                            method: "DELETE",
                            headers: { Authorization: `Bearer ${token}` },
                          }
                        );
                        const data = await res.json();
                        if (!res.ok) throw new Error(data.message || "L·ªói x√≥a ·∫£nh");

                        toast.success("‚úÖ X√≥a ·∫£nh c≈© th√†nh c√¥ng!");
                        setSelectedDeclaration((prev) => ({
                          ...prev,
                          documentImage: null,
                        }));
                        setEditForm((prev) => ({
                          ...prev,
                          documentImage: null,
                          documentImagePreview: null,
                        }));
                        if (fileInputRef.current) fileInputRef.current.value = "";
                      } catch (err) {
                        toast.error(`‚ùå ${err.message}`);
                      } finally {
                        setRemovingImage(false);
                      }
                    }
                  }}
                >
                  {removingImage ? (
                    <Spinner animation="border" size="sm" />
                  ) : (
                    "√ó"
                  )}
                </button>
              </div>
            )}
          </Form.Group>
        </div>
      </div>
    </Form>
  </Modal.Body>

  <Modal.Footer className="d-flex justify-content-between">
    <Button variant="secondary" onClick={() => setShowModal(false)}>
      H·ªßy
    </Button>
    <Button
      variant="primary"
      onClick={async () => {
        setSaving(true);
        try {
          await handleSave();
        } finally {
          setSaving(false);
        }
      }}
      disabled={saving}
    >
      {saving ? <Spinner animation="border" size="sm" /> : "L∆∞u"}
    </Button>
  </Modal.Footer>
</Modal>

      </div>
    </div>
  );
};

export default ResidenceDeclarationList;
