import axios from "axios";
import React, { useEffect, useState } from "react";
import { useLocation } from "react-router-dom";
import { useChat } from "../../../../context/ChatContext"; // ƒë∆∞·ªùng d·∫´n t√πy d·ª± √°n c·ªßa b·∫°n
import ChatBox from "./ChatBox";
const Inbox = ({ currentUserId }) => {
  const location = useLocation(); // ‚¨ÖÔ∏è L·∫•y state t·ª´ router
  const [partners, setPartners] = useState([]);
  const [selectedUserId, setSelectedUserId] = useState(null);
  const [selectedUserName, setSelectedUserName] = useState("");
  const { setReceiver, setPostInfo, postInfo } = useChat();
  const [chatBoxes, setChatBoxes] = useState(new Map());

  const handleSelectUser = (user) => {
    if (!user || !user._id) return;
  
    setSelectedUserId(user._id);
setSelectedUserName(user.name || user.email || "Ng∆∞·ªùi d√πng");

setReceiver({ id: user._id, name: user.name || user.email || "Ng∆∞·ªùi d√πng" });

// G√°n l·∫°i postInfo t∆∞∆°ng ·ª©ng t·ª´ chatBox (n·∫øu ƒë√£ c√≥)
const existingBox = chatBoxes.get(user._id);
if (existingBox?.postInfo) {
  setPostInfo(existingBox.postInfo);
} else if (user.lastPost) {
  setPostInfo(user.lastPost);
} else {
  setPostInfo(null);
}

// N·∫øu ch∆∞a c√≥ chatBox -> t·∫°o r·ªóng
if (!chatBoxes.has(user._id)) {
  setChatBoxes(prev => {
    const updated = new Map(prev);
    updated.set(user._id, { messages: [], postInfo: user.lastPost || null });
    return updated;
  });
}
  
    console.log("‚úÖ ƒê√£ ch·ªçn user:", user._id, user.name || user.email);
  };
  

  useEffect(() => {
    
    
    const fetchPartners = async () => {
      try {
        const res = await axios.get(
          `${import.meta.env.VITE_API_URL}/api/messages/recent-sender/${currentUserId}`
        );
    
        const data = res.data.data || [];
    
        const filtered = data.filter(
          (user) => user && user._id && user._id !== currentUserId
        );
    
        setPartners(filtered);
    
        console.log("üßæ Danh s√°ch ng∆∞·ªùi ƒë√£ t·ª´ng nh·∫Øn (filtered):");
        filtered.forEach((user, i) =>
          console.log(`${i + 1}. ID: ${user._id}, T√™n: ${user.name}`)
        );
    
        // ‚úÖ N·∫øu c√≥ receiver t·ª´ location (chuy·ªÉn t·ª´ post qua)
        const stateReceiver = location.state?.receiver;
        const statePostInfo = location.state?.postInfo;
    
        if (stateReceiver?.id) {
          const exists = filtered.some((p) => p._id === stateReceiver.id);
    
          if (!exists) {
            filtered.push({ _id: stateReceiver.id, name: stateReceiver.name || "Ng∆∞·ªùi d√πng" });
            setPartners([...filtered]);
          }
    
          setSelectedUserId(stateReceiver.id);
          setSelectedUserName(stateReceiver.name || "Ng∆∞·ªùi d√πng");
          setReceiver({ id: stateReceiver.id, name: stateReceiver.name || "Ng∆∞·ªùi d√πng" });
          setPostInfo(statePostInfo || null);
    
          console.log("‚û°Ô∏è ƒêang ch·ªçn t·ª´ location.state:", stateReceiver.id, stateReceiver.name);
    
          window.history.replaceState({}, document.title);
        } else {
          // ‚ùå KH√îNG c√≤n t·ª± ƒë·ªông ch·ªçn ng∆∞·ªùi ƒë·∫ßu ti√™n
          console.log("‚ÑπÔ∏è Kh√¥ng c√≥ state receiver, ch·ªù user ch·ªçn ng∆∞·ªùi t·ª´ sidebar.");
        }
      } catch (err) {
        console.error("‚ùå L·ªói l·∫•y danh s√°ch:", err);
      }
    };
    
  
    fetchPartners();
  }, [currentUserId]);
  
  useEffect(() => {
    console.log("üìç Selected user:", selectedUserId, selectedUserName);
  }, [selectedUserId, selectedUserName]);
  
  
  return (
    <div className="d-flex flex-row" style={{ height: "100vh", overflow: "hidden" }}>
    {/* --- Sidebar --- */}
    <div
      className="bg-light border-end"
      style={{
        width: 250,
        minWidth: 200,
        maxWidth: 300,
        overflowY: "auto",
        height: "100%",
      }}
    >
      <div className="p-3 border-bottom bg-primary text-white">
        <h6 className="mb-0 fw-bold">üí¨ Ng∆∞·ªùi ƒë√£ nh·∫Øn</h6>
      </div>
  
      <div className="list-group list-group-flush">
        {partners.length === 0 ? (
          <div className="text-center text-secondary py-4">
            Kh√¥ng c√≥ cu·ªôc h·ªôi tho·∫°i n√†o
          </div>
        ) : (
          partners.map((p) => (
            <button
              key={p._id}
              className={`list-group-item list-group-item-action border-0 text-start ${
                p._id === selectedUserId ? "active" : ""
              }`}
              style={{ fontWeight: p._id === selectedUserId ? "bold" : "normal" }}
              onClick={() => handleSelectUser(p)}
            >
              <span className="me-2">üë§</span>
              {p.name || p.email}
            </button>
          ))
        )}
      </div>
    </div>
  
    {/* --- ChatBox --- */}
    {/* <div className="flex-grow-1 d-flex flex-column" style={{ height: "100%" }}>
      <div className="border-bottom p-3 bg-white">
        <h6 className="mb-0 fw-bold text-primary">
          {selectedUserName
            ? `ƒêang chat v·ªõi: ${selectedUserName}`
            : "Ch·ªçn ng∆∞·ªùi ƒë·ªÉ xem h·ªôi tho·∫°i"}
        </h6>
      </div>
  
      <div className="flex-grow-1 p-3 bg-light" style={{ overflowY: "auto" }}>
        {selectedUserId && (
          <ChatBox
            key={selectedUserId}
            currentUserId={currentUserId}
            receiverId={selectedUserId}
            receiverName={selectedUserName}
            messages={chatBoxes.get(selectedUserId)?.messages || []}
            onSendMessage={(msg) => {
              setChatBoxes((prev) => {
                const oldBox =
                  prev.get(selectedUserId) || { messages: [], postInfo: null };
                const newMessages = [...oldBox.messages, msg];
                return new Map(prev).set(selectedUserId, {
                  ...oldBox,
                  messages: newMessages,
                });
              });
            }}
            onUpdatePostInfo={(postInfo) => {
              setChatBoxes((prev) => {
                const oldBox =
                  prev.get(selectedUserId) || { messages: [], postInfo: null };
                return new Map(prev).set(selectedUserId, {
                  ...oldBox,
                  postInfo,
                });
              });
            }}
          />
        )}
      </div>
    </div> */}
  </div>
  );
  
};

export default Inbox;